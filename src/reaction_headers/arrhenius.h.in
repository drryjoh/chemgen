{device_option}
{scalar_function}
arrhenius({scalar_parameter} A, {scalar_parameter} B, {scalar_parameter} E, {scalar_parameter} temperature) {const_option}
{{
		{scalar} pow_term = pow_gen(temperature, B);
		{scalar} exp_term = exp_gen(divide(-E, universal_gas_constant() * temperature));

		return multiply(A,
						multiply(pow_term,
								 exp_term));
}}

{device_option}
{scalar_function}
darrhenius_dtemperature({scalar_parameter} A, {scalar_parameter} B, {scalar_parameter} E, {scalar_parameter} temperature) {const_option}
{{
		{scalar} pow_term = pow_gen(temperature, B);
		{scalar} dpow_term_dtemperature = dpow_da(temperature, B);

		{scalar} exp_term =
			exp_gen(divide(-E,
						   universal_gas_constant() * temperature));
		{scalar} dexp_term_dtemperature =
			exp_chain(divide(-E,
							 universal_gas_constant() * temperature),
					  ddivide_db(-E,
								 universal_gas_constant() * temperature) * universal_gas_constant());

		return multiply(A,
						multiply_chain(pow_term,
									   dpow_term_dtemperature,
									   exp_term,
									   dexp_term_dtemperature));
}}

{device_option}
{scalar_function}
arrhenius({scalar_parameter} A, {scalar_parameter} B, {scalar_parameter} E, {scalar_parameter} temperature, {scalar_parameter} log_temperature) {const_option}
{{

		{scalar} exp_term = exp_gen(B * log_temperature + divide(-E, universal_gas_constant() * temperature));

		return multiply(A, exp_term);
}}

{device_option}
{scalar_function}
darrhenius_dtemperature({scalar_parameter} A, {scalar_parameter} B, {scalar_parameter} E, {scalar_parameter} temperature, {scalar_parameter} log_temperature) {const_option}
{{

		{scalar} dexp_term_dtemperature = exp_chain(B * log_temperature + divide(-E, universal_gas_constant() * temperature),
		                                            ddivide_db(-E, universal_gas_constant() * temperature) * universal_gas_constant());

		return multiply(A, dexp_term_dtemperature);
}}

{device_option}
{scalar_function}
darrhenius_dlog_temperature({scalar_parameter} A, {scalar_parameter} B, {scalar_parameter} E, {scalar_parameter} temperature, {scalar_parameter} log_temperature) {const_option}
{{

		{scalar} dexp_term_dlog_temperature = exp_chain(B * log_temperature + divide(-E, universal_gas_constant() * temperature),
		                                            B);

		return multiply(A, dexp_term_dlog_temperature);
}}
