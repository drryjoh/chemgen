{device_option}
{scalar_function}
f_sri({scalar_parameter} a, 
      {scalar_parameter} b,
      {scalar_parameter} c,
      {scalar_parameter} d,
      {scalar_parameter} e,
      {scalar_parameter} temperature,
      {scalar_parameter} Pr) {const_option}
{{
    // Compute the inner part of the expression
    {scalar} inner_expr = 
    multiply(a, exp_gen(-divide(b, temperature))) + exp_gen(-divide(temperature, c));
    
    // Compute the exponent based on Pr
    {scalar} exponent = inv(1.0 + pow_gen2(log10_gen(Pr)));
    
    // Compute the full expression
    return 
    multiply(pow_gen(inner_expr, 
                     exponent),
             pow_gen(temperature, 
                     e));
}}

{device_option}
{scalar_function}
df_sri_dtemperature({scalar_parameter} a, 
                    {scalar_parameter} b,
                    {scalar_parameter} c,
                    {scalar_parameter} d,
                    {scalar_parameter} e,
                    {scalar_parameter} temperature,
                    {scalar_parameter} Pr,
                    {scalar_parameter} dPr_dtemperature) {const_option}
{{
    // Compute the inner part of the expression
    {scalar} inner_expr = 
    multiply(a, exp_gen(-divide(b, temperature))) + exp_gen(-divide(temperature, c));
    
    {scalar} dinner_expr_dtemperature = 
    multiply(a, 
             exp_chain(-divide(b, temperature),
                       -ddivide_db(b, temperature))) 
    + exp_chain(-divide(temperature, c),
                -ddivide_da(temperature, c));
    
    // Compute the exponent based on Pr
    {scalar} exponent = inv(1.0 + pow_gen2(log10_gen(Pr)));
    {scalar} dexponent_dtemperature = 
    inv_chain(1.0 + pow_gen2(log10_gen(Pr)),
              pow_gen2_chain(log10_gen(Pr),
                             log10_chain(Pr,
                                         dPr_dtemperature)));
    
    // Compute the full expression
    return 
    multiply(pow_gen(inner_expr, 
                     exponent),
             pow_gen(temperature, 
                     e));

}}

{device_option}
{scalar_function}
falloff_sri({scalar_parameter} A_low,  //constant
            {scalar_parameter} B_low, //constant
            {scalar_parameter} E_low,  //constant
            {scalar_parameter} A_high, //constant
            {scalar_parameter} B_high,  //constant
            {scalar_parameter} E_high, //constant
            {scalar_parameter} a, //constant
            {scalar_parameter} b, //constant
            {scalar_parameter} c, //constant
            {scalar_parameter} d, //constant
            {scalar_parameter} e,// constant
            {scalar_parameter} temperature,
            {scalar_parameter} log_temperature,
            {scalar_parameter} mixture_concentration) {const_option}
{{
        {scalar} k_low  = arrhenius(A_low, B_low, E_low, temperature, log_temperature);
        {scalar} k_high = arrhenius(A_high, B_high, E_high, temperature, log_temperature);
        
        {scalar} Pr = 
        divide(multiply(k_low,
                        mixture_concentration),
               k_high);
        {scalar} inv_one_p_Pr = inv({scalar_cast}(1)+Pr);
        {scalar} Pr_inv_one_p_Pr = multiply(Pr, inv_one_p_Pr);

		{scalar} return_value = 
        multiply(multiply(k_high,
						  Pr_inv_one_p_Pr),
                 f_sri(a, b, c, d, e, temperature, Pr));

        return return_value;
}}

{device_option}
{scalar_function}
dfalloff_sri_temperature({scalar_parameter} A_low,  //constant
                          {scalar_parameter} B_low, //constant
                          {scalar_parameter} E_low,  //constant
                          {scalar_parameter} A_high, //constant
                          {scalar_parameter} B_high,  //constant
                          {scalar_parameter} E_high, //constant
                          {scalar_parameter} a, //constant
                          {scalar_parameter} b, //constant
                          {scalar_parameter} c, //constant
                          {scalar_parameter} d, //constant
                          {scalar_parameter} e,// constant
                          {scalar_parameter} temperature, 
                          {scalar_parameter} mixture_concentration) {const_option}
{{
        {scalar} k_low  = arrhenius(A_low, B_low, E_low, temperature);
        {scalar} dk_low_dtemperature  = darrhenius_dtemperature(A_low, B_low, E_low, temperature);
        {scalar} k_high = arrhenius(A_high, B_high, E_high, temperature);
        {scalar} dk_high_dtemperature = darrhenius_dtemperature(A_high, B_high, E_high, temperature);
        
        {scalar} Pr = 
        divide(multiply(k_low,
                        mixture_concentration),
               k_high);

        {scalar} dPr_dtemperature = 
        divide_chain(multiply(k_low,
                              mixture_concentration),
                     multiply_chain(k_low,
                                    dk_low_dtemperature,
                                    mixture_concentration,
                                    {scalar_cast}(0)),
                    k_high,
                    dk_high_dtemperature);
        
        {scalar} inv_one_p_Pr = inv({scalar_cast}(1)+Pr);
        {scalar} dinv_one_p_Pr_dtemperature = 
        inv_chain({scalar_cast}(1)+Pr,
                  dPr_dtemperature);

        {scalar} Pr_inv_one_p_Pr = multiply(Pr, inv_one_p_Pr);
        {scalar} dPr_inv_one_p_Pr_dtemperature = 
        multiply_chain(Pr,
                       dPr_dtemperature, 
                       inv_one_p_Pr,
                       dinv_one_p_Pr_dtemperature);

		return 
        multiply_chain(multiply(k_high,
						        Pr_inv_one_p_Pr),
                       multiply_chain(k_high,
                                      dk_high_dtemperature,
						              Pr_inv_one_p_Pr,
                                      dPr_inv_one_p_Pr_dtemperature),
                       f_sri(a, b, c, d, e, temperature, Pr),
                       df_sri_dtemperature(a, b, c, d, e, temperature, Pr, dPr_dtemperature));
}}
