#pragma once
#include <numeric>  // For std::accumulate
{device_option}
{scalar_function} 
sum_gen({species_parameter} a_s) {const_option} {{return {device_sum_inl};}}

{device_option}
{species_function} 
fill_gen({scalar_parameter} a) {const_option}
{{
    Species b_s{{}};  // Create an empty array
    {device_fill_inl};  // Fill it with 'value'
    return b_s;  // Return the filled array
}}

{device_option}
{species_function} 
scale_gen({scalar_parameter} a, {species_parameter} b_s) {const_option}
{{
    {species} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{chemical_state_function} 
scale_gen({scalar_parameter} a, {chemical_state_parameter} b_s) {const_option}
{{
    {chemical_state} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{reactions_function} 
scale_gen({scalar_parameter} a, {reactions_parameter} b_s) {const_option}
{{
    {reactions} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{temperature_monomial_function} 
scale_gen({scalar_parameter} a, {temperature_monomial_parameter} b_s) {const_option}
{{
    {temperature_monomial} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{scalar_function} 
scale_gen({scalar_parameter} a, {scalar_parameter} b) {const_option}
{{
    return a * b;
}}

{device_option}
{jacobian_function} 
scale_gen({scalar_parameter} a, {jacobian_parameter} b) {const_option}
{{
    {jacobian} c = {{}};

    for ({index} i = 0; i<{jacobian_end}; i++)
    {{
        for ({index} j = 0; j<{jacobian_end}; j++)
        {{
            c[i][j] = a * b[i][j];
        }}
    }}
    return c;
}}

{device_option}
{species_function} 
operator+({species_parameter} a_s, {species_parameter} b_s) {const_option}
{{
    {species} c_s;
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{jacobian_function} 
operator+({jacobian_parameter} a, {jacobian_parameter} b) {const_option}
{{
    {jacobian} c = {{}};

    for ({index} i = 0; i<{jacobian_end}; i++)
    {{
        for ({index} j = 0; j<{jacobian_end}; j++)
        {{
            c[i][j] = a[i][j] + b[i][j];
        }}
    }}
    return c;
}}

{device_option}
{species_function} 
operator-({species_parameter} a_s, {species_parameter} b_s_positive) {const_option}
{{
    {species} c_s;
    {species} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{reactions_function} 
operator+({reactions_parameter} a_s, {reactions_parameter} b_s) {const_option}
{{
    {reactions} c_s;
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{reactions_function} 
operator-({reactions_parameter} a_s, {reactions_parameter} b_s_positive) {const_option}
{{
    {reactions} c_s;
    {reactions} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{jacobian_function} 
operator-({jacobian_parameter} a, {jacobian_parameter} b) {const_option}
{{
    {jacobian} c = {{}};

    for ({index} i = 0; i<{jacobian_end}; i++)
    {{
        for ({index} j = 0; j<{jacobian_end}; j++)
        {{
            c[i][j] = a[i][j] - b[i][j];
        }}
    }}
    return c;
}}

{device_option}
{scalar_function} 
L2({jacobian_parameter} a) {const_option}
{{
    {scalar} sum = {scalar_cast}(0.0);

    for ({index} i = 0; i<{jacobian_end}; i++)
    {{
        for ({index} j = 0; j<{jacobian_end}; j++)
        {{
            sum+= pow2(a[i][j]);
        }}
    }}
    return sqrt_gen(sum);
}}


{device_option}
{temperature_monomial_function} 
operator+({temperature_monomial_parameter} a_s, {temperature_monomial_parameter} b_s) {const_option}
{{
    {temperature_monomial} c_s;
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{temperature_monomial_function} 
operator-({temperature_monomial_parameter} a_s, {temperature_monomial_parameter} b_s_positive) {const_option}
{{
    {temperature_monomial} c_s;
    {temperature_monomial} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}


{device_option}
{chemical_state_function} 
operator+({chemical_state_parameter} a_s, {chemical_state_parameter} b_s) {const_option}
{{
    {chemical_state} c_s;
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{chemical_state_function} 
operator-({chemical_state_parameter} a_s, {chemical_state_parameter} b_s_positive) {const_option}
{{
    {chemical_state} c_s;
    {chemical_state} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{species_function} 
operator*({species_parameter} a_s, {species_parameter} b_s) {const_option}
{{
    {species} c_s;
    {device_element_multiply_inl}
    return c_s;
}}

{device_option}
{chemical_state_function} 
operator*({chemical_state_parameter} a_s, {chemical_state_parameter} b_s) {const_option}
{{
    {chemical_state} c_s;
    {device_element_multiply_inl}
    return c_s;
}}

{device_option}
{species_function} 
get_species({chemical_state_parameter} y) {const_option}
{{
    {species} s;
    for ({index} i = 1; i <= n_species; i++)
    {{
        s[i-1] = y[i];
    }}
    return s;
}}

{device_option}
{scalar_function} 
get_energy({chemical_state_parameter} y) {const_option}
{{
    return y[0];
}}

{device_option}
{chemical_state_function} 
set_chemical_state({scalar_parameter} internal_energy,
                   {species_parameter} species) {const_option}
{{
    {chemical_state} y;
    for ({index} i = 1; i <= n_species; i++)
    {{
        y[i] = species[i-1];
    }}
    y[0] = internal_energy;
    return y;
}}

{device_option}
{scalar_function} norm2({species_parameter} x) 
{{
    {scalar} sum = {scalar_cast}(0.0);
    for ({index} i  = 0; i<n_species; i++)
    {{
        sum += x[i] * x[i]; 
    }}
    return sqrt_gen(sum);
}}

{device_option}
{scalar_function} norm2({jacobian_parameter} x) 
{{
    {scalar} sum = {scalar_cast}(0.0);
    for ({index} i  = 0; i<n_species; i++)
    {{
        for ({index} j  = 0; j<n_species; j++)
        {{
            sum += x[i][j] * x[i][j]; 
        }}
    }}
    return sqrt_gen(sum);
}}


{device_option}
{species_function} operator*({jacobian_parameter} A, {species_parameter} x) 
{{
    {species} r = {{}};
    for ({index} i = 0; i < n_species; ++i)
    {{
        for ({index} j = 0; j < n_species; ++j)
        {{
            r[i] += A[i][j] * x[j];
        }}
    }}
    return r;
}}

{device_option}
{jacobian_function} operator*({jacobian_parameter} A, {jacobian_parameter} B) 
{{
    {jacobian} C = {{}};
    for ({index} i = 0; i < n_species; ++i)
    {{
        for ({index} j = 0; j < n_species; ++j)
        {{
            C[i][j] = 0.0;
            for ({index} k = 0; k < n_species; ++k)
            {{
                C[i][j] += A[i][k] * B[k][j];
            }}
        }}
    }}
    return C;
}}

{device_option}
{species_function} operator*({scalar_parameter} s, {species_parameter} a) 
{{
    return scale_gen(s, a);
}}

{device_option}
{scalar_function} dot({species_parameter} a, {species_parameter} b) 
{{
    {scalar} dot_sum = {scalar_cast}(0.0);
    for ({index} i = 0; i < n_species; ++i) dot_sum += a[i]*b[i];
    return dot_sum;
}}


{device_option}
{jacobian_function} 
jacobian_I() 
{{
    {jacobian} I = {{}};
    for ({index} i = 0; i < {jacobian_end}; ++i) I[i][i] = 1.0;
    return I;
}}
