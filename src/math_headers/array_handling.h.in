#pragma once
#include <numeric>  // For std::accumulate
{device_option}
{scalar_function} 
sum_gen({species_parameter} a_s) {const_option} {{return {device_sum_inl};}}

{device_option}
{species_function} 
fill_gen({scalar_parameter} a) {const_option}
{{
    Species b_s{{}};  // Create an empty array
    {device_fill_inl};  // Fill it with 'value'
    return b_s;  // Return the filled array
}}

{device_option}
{species_function} 
scale_gen({scalar_parameter} a, {species_parameter} b_s) {const_option}
{{
    {species} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{chemical_state_function} 
scale_gen({scalar_parameter} a, {chemical_state_parameter} b_s) {const_option}
{{
    {chemical_state} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{temperature_monomial_function} 
scale_gen({scalar_parameter} a, {temperature_monomial_parameter} b_s) {const_option}
{{
    {temperature_monomial} c_s;
    {device_transform_inl}
    return c_s;
}}

{device_option}
{scalar_function} 
scale_gen({scalar_parameter} a, {scalar_parameter} b) {const_option}
{{
    return a * b;
}}

{device_option}
{species_function} 
operator+({species_parameter} a_s, {species_parameter} b_s) {const_option}
{{
    {species} c_s;
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{species_function} 
operator-({species_parameter} a_s, {species_parameter} b_s_positive) {const_option}
{{
    {species} c_s;
    {species} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{temperature_monomial_function} 
operator-({temperature_monomial_parameter} a_s, {temperature_monomial_parameter} b_s_positive) {const_option}
{{
    {temperature_monomial} c_s;
    {temperature_monomial} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}


{device_option}
{chemical_state_function} 
operator+({chemical_state_parameter} a_s, {chemical_state_parameter} b_s) {const_option}
{{
    {chemical_state} c_s;
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{chemical_state_function} 
operator-({chemical_state_parameter} a_s, {chemical_state_parameter} b_s_positive) {const_option}
{{
    {chemical_state} c_s;
    {chemical_state} b_s = scale_gen({scalar_cast}(-1.0), b_s_positive);
    {device_element_sum_inl}
    return c_s;
}}

{device_option}
{species_function} 
operator*({species_parameter} a_s, {species_parameter} b_s) {const_option}
{{
    {species} c_s;
    {device_element_multiply_inl}
    return c_s;
}}

{device_option}
{chemical_state_function} 
operator*({chemical_state_parameter} a_s, {chemical_state_parameter} b_s) {const_option}
{{
    {chemical_state} c_s;
    {device_element_multiply_inl}
    return c_s;
}}

{device_option}
{species_function} 
get_species({chemical_state_parameter} y) {const_option}
{{
    {species} s;
    for ({index} i = 1; i <= n_species; i++)
    {{
        s[i-1] = y[i];
    }}
    return s;
}}

{device_option}
{scalar_function} 
get_energy({chemical_state_parameter} y) {const_option}
{{
    return y[0];
}}

{device_option}
{chemical_state_function} 
set_chemical_state({scalar_parameter} internal_energy,
                   {species_parameter} species) {const_option}
{{
    {chemical_state} y;
    for ({index} i = 1; i <= n_species; i++)
    {{
        y[i] = species[i-1];
    }}
    y[0] = internal_energy;
    return y;
}}
