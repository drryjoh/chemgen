//Thermo-fits specific heat 
{device_option}
{temperature_monomial_function} 
temperature_monomial({scalar_parameter} temperature) {const_option} 
{{
    {temperature_monomial} temperature_monomial_sequence_ = {{}};
    temperature_monomial_sequence_[0] = 1.0; // The first term is always 1

    // Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i < n_order_thermo; ++i)
    {{
        temperature_monomial_sequence_[i] = temperature_monomial_sequence_[i - 1] * temperature;  // T^i = T^(i-1) * T
    }}
    
    return temperature_monomial_sequence_;
}}

{device_option}
{temperature_monomial_function} 
dtemperature_monomial_dtemperature({scalar_parameter} temperature) {const_option} 
{{
    {temperature_monomial} temperature_monomial_derivative_ = {{}};
    {temperature_monomial} temperature_monomial_ = temperature_monomial(temperature);
    temperature_monomial_derivative_[0] = 0.0; // The derivative of T^0 (constant 1) is 0


    // Derivative of Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i < n_order_thermo; ++i) 
    {{
        temperature_monomial_derivative_[i] = i * temperature_monomial_[i - 1]; // i * T^(i-1)
    }}
    
    return temperature_monomial_derivative_;
}}

{device_option}
{scalar_function} 
contract({temperature_monomial_parameter} temperature_monomial, {temperature_monomial_parameter} coefficients) {const_option} 
{{
    {scalar} fit = {scalar_cast}(0);
    for ({index} i = 0; i < n_order_thermo; ++i)
    {{
        fit += temperature_monomial[i] * coefficients[i];
    }}
    
    return fit;
}}

//thermo fits energy
{device_option}
{temperature_energy_monomial_function} 
temperature_energy_monomial({scalar_parameter} temperature) {const_option} 
{{
    {temperature_energy_monomial} temperature_energy_monomial_sequence_ = {{}};
    temperature_energy_monomial_sequence_[0] = 1.0; // The first term is always 1

    // Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i < n_order_thermo + 1; ++i)
    {{
        temperature_energy_monomial_sequence_[i] = temperature_energy_monomial_sequence_[i - 1] * temperature;  // T^i = T^(i-1) * T
    }}
    
    return temperature_energy_monomial_sequence_;
}}

{device_option}
{temperature_energy_monomial_function} 
dtemperature_energy_monomial_dtemperature({scalar_parameter} temperature) {const_option} 
{{
    {temperature_energy_monomial} temperature_energy_monomial_derivative_ = {{}};
    {temperature_energy_monomial} temperature_energy_monomial_ = temperature_energy_monomial(temperature);
    temperature_energy_monomial_derivative_[0] = 0.0; // The derivative of T^0 (constant 1) is 0


    // Derivative of Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i < n_order_thermo + 1; ++i) 
    {{
        temperature_energy_monomial_derivative_[i] = i * temperature_energy_monomial_[i - 1]; // i * T^(i-1)
    }}
    
    return temperature_energy_monomial_derivative_;
}}

{device_option}
{scalar_function} 
contract({temperature_energy_monomial_parameter} temperature_energy_monomial, {temperature_energy_monomial_parameter} coefficients) {const_option} 
{{
    {scalar} fit = {scalar_cast}(0);
    for ({index} i = 0; i < n_order_thermo + 1; ++i)
    {{
        fit += temperature_energy_monomial[i] * coefficients[i];
    }}
    
    return fit;
}}

//entropy
//thermo fits energy size is same, but ln(T) is at the end
{device_option}
{temperature_energy_monomial_function} 
temperature_entropy_monomial({scalar_parameter} temperature) {const_option} 
{{
    {temperature_energy_monomial} temperature_energy_monomial_sequence_ = {{}};
    temperature_energy_monomial_sequence_[0] = {scalar_cast}(1); // The first term is always 1
    temperature_energy_monomial_sequence_[n_order_thermo] = {logmath}(temperature); // The first term is always 1

    // Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i < n_order_thermo; ++i)
    {{
        temperature_energy_monomial_sequence_[i] = temperature_energy_monomial_sequence_[i - 1] * temperature;  // T^i = T^(i-1) * T
    }}
    
    return temperature_energy_monomial_sequence_;
}}

{device_option}
{temperature_energy_monomial_function} 
dtemperature_entropy_monomial_dtemperature({scalar_parameter} temperature) {const_option} 
{{
    {temperature_energy_monomial} temperature_energy_monomial_derivative_ = {{}};
    {temperature_energy_monomial} temperature_energy_monomial_ = temperature_entropy_monomial(temperature);
    temperature_energy_monomial_derivative_[0] = 0.0; // The derivative of T^0 (constant 1) is 0
    temperature_energy_monomial_derivative_[n_order_thermo] = inv(temperature); // derivative of ln(T)


    // Derivative of Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i < n_order_thermo; ++i) 
    {{
        temperature_energy_monomial_derivative_[i] = i * temperature_energy_monomial_[i - 1]; // i * T^(i-1)
    }}
    
    return temperature_energy_monomial_derivative_;
}}
//contract is the same for energy


{device_option}
{temperature_gibbs_monomial_function} 
temperature_gibbs_monomial({scalar_parameter} temperature) {const_option} 
{{
    {temperature_gibbs_monomial} temperature_gibbs_monomial_sequence_ = {{}};
    temperature_gibbs_monomial_sequence_[0] = {scalar_cast}(1); // The first term is always 1
    temperature_gibbs_monomial_sequence_[n_order_thermo + 1] = multiply(temperature, {logmath}(temperature)); // The first term is always 1

    // Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i <= n_order_thermo; ++i)
    {{
        temperature_gibbs_monomial_sequence_[i] = temperature_gibbs_monomial_sequence_[i - 1] * temperature;  // T^i = T^(i-1) * T
    }}
    
    return temperature_gibbs_monomial_sequence_;
}}

{device_option}
{temperature_gibbs_monomial_function} 
dtemperature_gibbs_monomial_dtemperature({scalar_parameter} temperature) {const_option} 
{{
    {temperature_gibbs_monomial} temperature_gibbs_monomial_derivative_ = {{}};
    {temperature_gibbs_monomial} temperature_gibbs_monomial_ = temperature_gibbs_monomial(temperature);
    temperature_gibbs_monomial_derivative_[0] = 0.0; // The derivative of T^0 (constant 1) is 0
    temperature_gibbs_monomial_derivative_[n_order_thermo + 1] = 
    multiply_chain(temperature, {scalar_cast}(1), {logmath}(temperature), inv(temperature)); 


    // Derivative of Horner's method: Start with 1 and multiply progressively by T
    for ({index} i = 1; i <= n_order_thermo; ++i) 
    {{
        temperature_gibbs_monomial_derivative_[i] = i * temperature_gibbs_monomial_[i - 1]; // i * T^(i-1)
    }}
    
    return temperature_gibbs_monomial_derivative_;
}}

{device_option}
{scalar_function} 
contract({temperature_gibbs_monomial_parameter} temperature_gibbs_monomial, {temperature_gibbs_monomial_parameter} coefficients) {const_option} 
{{
    {scalar} fit = {scalar_cast}(0);
    for ({index} i = 0; i < n_order_thermo + 2; ++i)
    {{
        fit += temperature_gibbs_monomial[i] * coefficients[i];
    }}
    
    return fit;
}}

//Pressure
{device_option}
{scalar_function} 
pressure({species_parameter} species, 
         {scalar_parameter} temperature) {const_option} 
{{
    return universal_gas_constant() * temperature * {sum}(species);
}}

{device_option}
{scalar_function} 
dpressure_dtemperature({species_parameter} species, 
                       {scalar_parameter} temperature) {const_option} 
{{
    return universal_gas_constant() * {sum}(species);
}}

{device_option}
{species_function} 
dpressure_dspecies({species_parameter} species, 
                   {scalar_parameter} temperature) {const_option} 
{{
    return {scale}(universal_gas_constant(), {fill}(temperature));
}}