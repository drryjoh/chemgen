{preconditioner}
{direct_solver}

#ifdef CHEMGEN_PRECONDITIONER_JACOBI
{device_option}
{jacobian_function} inverse_diagonal({jacobian_function} J) {const_option}
{{
    {jacobian} M_inv = {{}};
    for ({index} i = 0; i < n_species; ++i)
    {{
        M_inv[i][i] = std::abs(J[i][i]) > 1e-14 ? 1.0 / J[i][i] : 0.0;
    }}
    return M_inv;
}}

{device_option}
{jacobian_function} apply_diagonal({jacobian_function} P, {jacobian_function} A) {const_option}
{{
    {jacobian} M = {{}};
    for ({index} i = 0; i < n_species; ++i)
    {{
        for ({index} j = 0; j < n_species; ++j)
        {{
            M[i][j] = P[i][i] * A[i][j];
        }}
    }}
    return M;
}}

{device_option}
{species_function} apply_diagonal({jacobian_function} P, {species} b) {const_option}
{{
    {species} m = {{}};
    for ({index} i = 0; i < n_species; ++i)
    {{
        m[i] = P[i][i] * b[i];
    }}
    return m;
}}
#endif

#ifdef CHEMGEN_PRECONDITIONER_GAUSS_SEIDEL
{device_option}
{species_function}
apply_gauss_seidel({jacobian_function} A, {species_function} v)
{{
	{species} z = {{}};
    for ({index} i = 0; i < n_species; ++i)
    {{
        {scalar} sum = 0.0;
        for ({index} j = 0; j < i; ++j)
            sum += A[i][j] * z[j]; // Already computed values of z

        // Diagonal + lower
        {scalar} diag = A[i][i];
        z[i] = (v[i] - sum) / (std::abs(diag) > 1e-14 ? diag : 1.0); // Avoid div by zero
    }}
    return z;
}}
#endif

{device_option}
{species_function}
gmres_solve({jacobian_parameter} A, {species_parameter} b, {scalar} abs_tol = 1e-8, {scalar} rel_tol = 1e-4) 
{{
	{index} max_iter = 100;
    {species} x = {{}};
	{species} cs = {{}};
	{species} sn = {{}};
#ifdef CHEMGEN_PRECONDITIONER_JACOBI
	{jacobian} P = inverse_diagonal(A);
	{jacobian} A_ = apply_diagonal(P, A);
	{species} b_ = apply_diagonal(P, b);
#else
	{jacobian} A_ = A;
	{species} b_ = b;
#endif

    {species} r = b_ - (A_ * x);
	{scalar} norm2_r = norm2(r);
    {scalar} norm2_A = norm2(A_);
    
    if (norm2_r < abs_tol)
    {{
        return x;
    }}

    std::array<Species, n_species + 1> V = {{}};
    V[0] = scale_gen(inv_gen(norm2_r), r);

    std::array<std::array<{scalar}, n_species + 1>, n_species + 1> H = {{}};
    std::array<{scalar}, n_species + 1> g = {{}};
    g[0] = norm2(r);

	{index} final_iter = 0;

    for ({index} j = 0; j < n_species; ++j)
    {{
		final_iter = j;
        {species} w = A_ * V[j];

        // Modified Gram-Schmidt
        for ({index} i = 0; i <= j; ++i)
        {{
            H[i][j] = dot(V[i], w);
            w = w - H[i][j] * V[i];
        }}

        H[j+1][j] = norm2(w);
        if (H[j+1][j] < abs_tol * norm2_A)
            break;
        V[j+1] = scale_gen(inv_gen(H[j+1][j]),w);

		// Apply Givens rotations to new column of H
		for (int i = 0; i < j; ++i)
		{{
			{scalar} temp = cs[i] * H[i][j] + sn[i] * H[i+1][j];
			H[i+1][j] = -sn[i] * H[i][j] + cs[i] * H[i+1][j];
			H[i][j] = temp;
		}}
        // Compute new Givens rotation
        {scalar} a = H[j][j];
        {scalar} b_h = H[j+1][j];
        {scalar} r_val = std::sqrt(a * a + b_h * b_h);
        cs[j] = a / r_val;
        sn[j] = b_h / r_val;

        // Apply to H and g
        H[j][j] = r_val;
        H[j+1][j] = 0.0;
		
		g[j+1] = 0.0; // Ensure valid memory before rotation
        {scalar} temp_g = cs[j] * g[j] + sn[j] * g[j+1];
        g[j+1] = -sn[j] * g[j] + cs[j] * g[j+1];
        g[j] = temp_g;
		
        // Convergence check
        {scalar} res_norm = std::abs(g[j+1]);
        if (res_norm < abs_tol || res_norm < rel_tol * norm2_r)
            break;
    }}


    // Solve least squares problem Hy = g using back-substitution on H (upper triangular approx)
    std::array<{scalar}, n_species> y = {{}};
    for ({index} i = final_iter; i >= 0; --i)
    {{
        {scalar} sum = 0;
		for ({index} j = i + 1; j <= final_iter; ++j)
            sum += H[i][j] * y[j];
        y[i] = (g[i] - sum) / H[i][i];

    }}
    {species} result = {{}};
    for ({index} i = 0; i < n_species; ++i)
        result = result + y[i] * V[i];

    return result;
}}

