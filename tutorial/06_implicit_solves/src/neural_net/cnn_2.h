#pragma once
#include <iostream>
#include <array>
#include <random>
#include <cmath>
#include <functional>
#include <stdexcept>
#include <algorithm> 
#include <cstddef> 

// template<typename Scalar>
// using activationFunction = void(*)(Scalar&, Scalar, Scalar);


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


// template <typename Scalar, int out_channels, int out_height, int out_width, typename ActivationFunc>
// void Conv2D(Scalar * __restrict outputs, const Scalar * __restrict inputs, const Scalar *__restrict weights, const Scalar *__restrict biases, int in_channels, int in_height, int in_width, int kernel_height, int kernel_width, int stride_height, int stride_width, int padding_height, int padding_width, ActivationFunc activation_function, Scalar alpha) noexcept
// {
 
//     Scalar sum_buf[out_channels];
//     const int input_row_stride = in_width * in_channels;
//     const int weights_per_khkw = in_channels * out_channels;  
//     const int weights_per_kh = kernel_width * weights_per_khkw;

//     for (int oh = 0; oh < out_height; ++oh)
//     {
//         const int h_origin = oh * stride_height - padding_height;

//         for (int ow = 0; ow < out_width; ++ow)
//         {
//             for (int oc = 0; oc < out_channels; ++oc) {
//                 sum_buf[oc] = biases[oc];
//             }
//             const int w_origin = ow * stride_width - padding_width;

//             const int kh_min = std::max(0,       -h_origin);
//             const int kh_max = std::min(kernel_height, in_height - h_origin);
//             const int kw_min = std::max(0,       -w_origin);
//             const int kw_max = std::min(kernel_width, in_width - w_origin);

//             for (int kh = kh_min; kh < kh_max; ++kh)
//             {
//                 const int in_h = h_origin + kh;
//                 const int input_row_offset = in_h * input_row_stride;
//                 const int weight_kh_offset = kh * weights_per_kh;

//                 for (int kw = kw_min; kw < kw_max; ++kw)
//                 {
//                     const int in_w = w_origin + kw;
//                     const int input_base = input_row_offset + in_w * in_channels;

//                     const int weight_base = weight_kh_offset + (kw * weights_per_khkw);

//                     for (int ic = 0; ic < in_channels; ++ic)
//                     {
//                         const Scalar input_val = inputs[input_base + ic];
//                         const Scalar *w_ptr = weights + weight_base + ic * out_channels;

//                         // #pragma unroll
//                         for (int oc = 0; oc < out_channels; ++oc) {
//                             sum_buf[oc] += input_val * w_ptr[oc];
//                         }
//                     }
//                 }
//             }

//             Scalar *out_pixel_ptr = outputs + ((oh * out_width + ow) * out_channels);
//             for (int oc = 0; oc < out_channels; ++oc) {
//                 activation_function(out_pixel_ptr[oc], sum_buf[oc], alpha);
//             }
//         }
//     }
// }
template <typename Scalar, int out_channels, int out_height, int out_width, typename ActivationFunc>
__attribute__((hot))
void Conv2D(Scalar * __restrict outputs, const Scalar * __restrict inputs, 
            const Scalar *__restrict weights, const Scalar *__restrict biases, 
            int in_channels, int in_height, int in_width, 
            int kernel_height, int kernel_width, 
            int stride_height, int stride_width, 
            int padding_height, int padding_width, 
            ActivationFunc activation_function, Scalar alpha) noexcept {
    
    const int input_row_stride = in_width * in_channels;
    const int output_row_stride = out_width * out_channels;
    const int weights_per_khkw = in_channels * out_channels;  
    const int weights_per_kh = kernel_width * weights_per_khkw;

    #pragma omp parallel for collapse(2)
    for (int oh = 0; oh < out_height; ++oh) {
        for (int ow = 0; ow < out_width; ++ow) {
            Scalar sum_buf[out_channels];
            
            // Initialize sum buffer with biases
            for (int oc = 0; oc < out_channels; ++oc) {
                sum_buf[oc] = biases[oc];
            }

            const int h_origin = oh * stride_height - padding_height;
            const int w_origin = ow * stride_width - padding_width;

            const int kh_min = std::max(0, -h_origin);
            const int kh_max = std::min(kernel_height, in_height - h_origin);
            const int kw_min = std::max(0, -w_origin);
            const int kw_max = std::min(kernel_width, in_width - w_origin);

            // Compute convolution
            for (int kh = kh_min; kh < kh_max; ++kh) {
                const int in_h = h_origin + kh;
                const int input_row_offset = in_h * input_row_stride;
                const int weight_kh_offset = kh * weights_per_kh;

                for (int kw = kw_min; kw < kw_max; ++kw) {
                    const int in_w = w_origin + kw;
                    const int input_base = input_row_offset + in_w * in_channels;
                    const int weight_base = weight_kh_offset + (kw * weights_per_khkw);

                    #pragma clang loop vectorize(enable)
                    for (int ic = 0; ic < in_channels; ++ic) {
                        const Scalar input_val = inputs[input_base + ic];
                        const Scalar *w_ptr = weights + weight_base + ic * out_channels;

                        for (int oc = 0; oc < out_channels; ++oc) {
                            sum_buf[oc] += input_val * w_ptr[oc];
                        }
                    }
                }
            }

            Scalar *out_pixel_ptr = outputs + ((oh * out_width + ow) * out_channels);
            for (int oc = 0; oc < out_channels; ++oc) {
                activation_function(out_pixel_ptr[oc], sum_buf[oc], alpha);
            }
        }
    }
}

template<typename Scalar, int N>
void Reshape(Scalar * __restrict outputs, const Scalar * __restrict inputs) noexcept {
    #pragma omp simd
    #pragma unroll
    for (int i = 0; i < N; ++i) {
        outputs[i] = inputs[i];
    }
}   

//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


template <typename Scalar = double>
auto cnn_2(const std::array<std::array<Scalar, 96>, 96>& initial_input) {

    // constexpr int flat_size = 9216; 
    // std::array<Scalar, flat_size> model_input;
    // int idx = 0;
    // for (int i0 = 0; i0 < 96; i0++) {
    //   #pragma unroll
    //   for (int i1 = 0; i1 < 96; i1++) {
    //         int flatIndex = i0 * 96 + i1 * 1;
    //         model_input[flatIndex] = initial_input[i0][i1];
    //     }
    // }
    constexpr int flat_size = 9216; 
    std::array<Scalar, flat_size> model_input;
    #pragma omp simd
    for (int i = 0; i < 96 * 96; i++) {
        model_input[i] = initial_input[i / 96][i % 96];
    }
    if (model_input.size() != 9216) { throw std::invalid_argument("Invalid input size. Expected size: 9216"); }


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    // Layer 1: Conv2D
    constexpr std::array<Scalar, 144> convKernel_1 = {1.816899627e-01, -1.007063314e-01, -5.946978927e-02, -8.198072761e-02, 3.066590428e-02, -9.488216788e-02, -7.206454873e-03, 6.612081826e-02, -3.019490838e-02, 9.802494943e-02, 1.551659852e-01, -1.903977096e-01, 1.745145172e-01, 1.750819236e-01, -3.266602755e-02, -1.018415466e-01, -3.632365167e-02, -1.327430904e-01, -4.243959486e-02, -1.130905375e-01, 4.566699266e-02, 9.721010923e-03, -6.029206514e-02, 9.986995161e-02, -1.839699149e-01, 3.052002192e-02, -1.154958531e-01, 8.775238693e-02, 7.050590217e-02, -1.459162980e-01, -1.150220633e-02, 1.455612034e-01, 1.843291074e-01, 1.875974238e-02, -9.815309942e-02, -1.013664305e-01, 1.865628511e-01, 1.566983908e-01, -5.893367529e-02, 1.132260263e-02, -1.054801047e-02, 5.812774599e-02, 3.440199792e-02, -1.564633250e-01, 1.727760583e-01, 9.889505804e-02, -1.814454794e-02, -6.668218970e-02, 6.954254210e-02, -4.514579475e-02, -2.124220133e-02, -5.974829197e-03, 1.490381807e-01, -2.754634619e-02, 1.933401376e-01, -4.276186228e-04, 1.354071498e-02, -1.583054662e-02, -2.940039337e-02, 1.353042573e-01, -9.374435991e-02, -1.142271683e-01, 1.820877641e-01, -1.113797948e-01, -8.999845386e-02, 1.661670655e-01, 9.414415061e-02, 1.203291863e-01, -1.987984776e-02, -1.642687172e-01, -6.394557655e-02, -1.273155212e-01, 1.547011584e-01, -1.254641265e-01, 1.529631019e-02, 6.355966628e-02, 1.091078669e-01, 5.663733184e-02, 1.027781218e-01, -1.109038293e-01, 1.057585627e-01, 8.685179055e-02, -1.283547580e-01, -1.387387514e-01, 2.629351616e-02, 3.908815980e-02, -8.234923333e-02, -1.809713095e-01, -1.598104537e-01, -1.420062333e-01, 6.299917400e-02, 1.369010955e-01, -1.799346358e-01, 8.265033364e-03, 1.417102367e-01, 3.587596118e-02, 5.172902346e-02, -9.497395158e-02, 1.508484036e-01, -9.763091058e-02, 8.798609674e-02, 1.739386469e-01, 1.466091126e-01, -1.121750176e-01, -9.309393913e-02, 1.692755669e-01, 4.377900064e-02, 3.049655259e-02, 1.362992376e-01, -2.221509814e-03, -8.111685514e-03, -7.056146860e-02, 4.956974089e-02, -1.014728472e-01, 1.465009898e-01, 4.369010031e-02, 1.105247885e-01, -1.913974583e-01, 1.176161915e-01, -7.551959902e-02, -5.468957126e-02, -1.455410868e-01, -4.902286828e-02, -1.506251246e-01, -5.837330222e-02, -6.009665132e-02, 1.202153116e-01, -1.773755401e-01, -9.811867774e-02, -8.554934710e-02, 1.626505107e-01, 1.681870669e-01, 1.668372899e-01, -1.698060632e-01, 9.499669075e-03, -1.852922291e-01, 1.075025946e-01, 2.098947763e-03, 1.665512770e-01, -5.533432961e-02, 4.622152448e-02, -1.141009629e-01, 1.322203428e-01, 1.591627151e-01};
    constexpr std::array<Scalar, 16> convBias_1 = {-7.721364229e-24, -1.382768446e-24, -7.313989358e-24, -3.142986916e-24, -3.167551058e-24, -1.598859496e-23, -6.970432891e-26, -5.457305032e-24, 4.908797029e-24, -1.574813596e-23, -5.147240887e-24, -8.533482332e-24, 1.540157516e-23, 1.059614534e-24, -1.152520970e-23, -1.414312232e-24};

    // Layer 2: Conv2D
    constexpr std::array<Scalar, 1152> convKernel_2 = {8.895541728e-02, 5.055288970e-02, 1.649659425e-01, -1.311240643e-01, -1.628649682e-01, 5.209498107e-02, -2.195759118e-02, -2.962000668e-02, 1.176298112e-01, 1.040281802e-01, -2.268028259e-02, 7.106702030e-02, 1.428775042e-01, 1.387183368e-02, 9.918428957e-02, 9.277899563e-02, -1.388414353e-01, -1.198554859e-01, 1.462761313e-01, -1.082096919e-01, 4.591314495e-02, 3.980834782e-02, -1.332641095e-01, 3.395016491e-02, -3.957204521e-02, -4.352446645e-02, -4.649154842e-02, -2.645090222e-03, -7.229487598e-02, -9.965822101e-03, -1.288445294e-02, 1.543470770e-01, 5.598799884e-02, -2.723021805e-02, 9.502126276e-02, -4.260241985e-05, -8.772977442e-02, 3.420297801e-02, 1.004449278e-01, -1.586566418e-01, 2.233099937e-02, 8.357484639e-02, 1.917846501e-02, 1.008444279e-01, -3.293378651e-02, 7.822453976e-02, 1.980857551e-02, -2.323818207e-02, -6.610282511e-02, 2.459120750e-02, -1.386764497e-01, 7.385647297e-02, -2.170872688e-02, -3.337457776e-03, 1.267534047e-01, -1.548421383e-02, -1.096083745e-01, 2.956843376e-02, -8.522868156e-02, 4.771427810e-02, -7.681600749e-02, 1.309777945e-01, 5.165302753e-02, 7.326336205e-02, 3.768749535e-02, 8.248169720e-02, 2.485923469e-02, -3.990340233e-02, 1.270284802e-01, 6.652796268e-02, -6.754136086e-02, 7.752820849e-03, -9.805767238e-02, 1.261889488e-01, -1.978190243e-02, -6.223945320e-02, -3.637532890e-02, -1.397764683e-02, 1.020435989e-02, -1.510770768e-01, 4.252791405e-03, -9.990060329e-02, -4.256014526e-02, 1.324622780e-01, 1.054759771e-01, 1.751458645e-02, 8.704607189e-02, -1.247769222e-01, -5.758011341e-02, -8.979062736e-02, -1.484110057e-01, -6.487858295e-02, 1.280420274e-01, -1.348274946e-01, -1.511532515e-01, -8.717958629e-02, 5.143551528e-02, -1.088972911e-01, 8.283972740e-03, 8.412571251e-02, -2.446913719e-02, 7.311379910e-02, -1.179330349e-01, -1.011226997e-01, 1.163527369e-03, -7.253047079e-02, 1.418271810e-01, -4.583911598e-02, 4.516923428e-02, 4.498505592e-02, 6.044583023e-02, -1.597610712e-01, -5.663542449e-02, -1.136465892e-01, -5.549892038e-02, 1.156602353e-01, -6.074675173e-02, -7.940860838e-02, 7.368838787e-02, -3.196740150e-02, -6.528186798e-02, 6.340022385e-02, -5.277201533e-03, 1.647491604e-01, -1.396521032e-01, -7.884415239e-02, -1.201907024e-01, -7.782177627e-02, 5.401606858e-02, -1.194387674e-01, 5.027477443e-02, -9.769582748e-02, 1.157391816e-01, -7.063075155e-02, -1.300330460e-02, 1.152190417e-01, -7.818941772e-02, -8.347527683e-02, 3.970225155e-02, -3.677444160e-02, -1.457624882e-01, -1.306402683e-02, -1.562937498e-01, -6.443866342e-02, 1.796591282e-02, -2.947282791e-02, 1.109671593e-02, 7.965143025e-02, -1.521040648e-01, -7.071447372e-02, 1.125416309e-01, -1.197754145e-01, -1.227493584e-02, 1.499710828e-01, -7.507686317e-02, -5.635392666e-02, 1.567710787e-01, 1.902191341e-02, -1.483386457e-01, -1.187558174e-01, 1.521569639e-01, -3.865472972e-02, 1.439527422e-01, 1.388771981e-01, -5.498246849e-02, 1.358239204e-01, -4.700255394e-02, -1.065021753e-01, 5.686116219e-02, -7.412695885e-02, 1.168691665e-01, 5.529201031e-02, -1.509759873e-01, -3.092412651e-02, -1.213312149e-03, 1.494442374e-01, 3.916852176e-02, -4.159629345e-02, 9.237055480e-02, -1.072950363e-01, 1.222594082e-02, 3.724150360e-02, -1.589184254e-01, -1.053993404e-02, -5.774176121e-02, 3.866977990e-02, -1.446230114e-01, 6.934936345e-02, -1.145220995e-01, -1.093245372e-01, 1.405313164e-01, 7.025472820e-02, 1.085507870e-02, 1.201252490e-01, 4.408366978e-02, -1.321475208e-01, -4.262042046e-02, -1.189965829e-01, -7.020001113e-02, -1.505061835e-01, -7.768075168e-02, -7.999193668e-02, -5.146988481e-02, 1.175752431e-01, 1.374006271e-02, 7.409076393e-02, -1.118980646e-01, -2.508325875e-02, -2.370850742e-02, 1.652479172e-02, 3.450436890e-02, -7.483379543e-02, 1.343326122e-01, 3.789588809e-03, -1.548763514e-01, 1.313600987e-01, -1.646783352e-01, -1.191941127e-01, 3.283782303e-02, -6.000085920e-02, -1.040375233e-02, -1.199115142e-01, -1.792244613e-02, 1.056225598e-02, -1.018443927e-01, 8.228929341e-02, 8.929844201e-02, 2.291285992e-02, -7.213282585e-02, -9.961303324e-02, 8.684541285e-02, -4.594294727e-02, 1.211546808e-01, -8.973221481e-02, -9.212561697e-02, 3.829140961e-02, 1.173044890e-01, 8.215694129e-02, -1.037828177e-01, -1.410158128e-01, -9.753119946e-02, 4.681809247e-02, -1.516156197e-01, -1.191608161e-01, -1.887710392e-02, -6.843201816e-02, -2.890825272e-04, -7.332265377e-02, 1.349224597e-01, -9.179842472e-02, -1.325552166e-01, -1.075971574e-01, -5.065754056e-03, -1.163638085e-01, -4.773513973e-02, 7.698030770e-02, -1.198676825e-01, -1.484369040e-01, 9.247347713e-03, -7.861264795e-02, -7.115344703e-02, 1.436840743e-01, -6.989737600e-02, 7.932050526e-02, -1.024878025e-01, 8.260460198e-02, 1.076910943e-01, 1.166417152e-01, 6.410324574e-02, 1.598925143e-01, 2.596811950e-02, -1.392960548e-03, 1.397157460e-01, 6.098254025e-02, -6.437611580e-02, -5.516450107e-02, -1.042751074e-01, 1.601731032e-01, -5.301669240e-03, 1.432047635e-01, 1.362894922e-01, 1.484386176e-01, -4.330226034e-02, 2.689857781e-02, -9.712815285e-02, 1.207911521e-01, -1.340874135e-01, 2.607353032e-02, -8.379495144e-02, 4.746496677e-02, -1.183462590e-01, 1.274450570e-01, -2.554130554e-02, 8.274686337e-02, -1.027433574e-02, 8.743073046e-02, 9.375269711e-02, 7.564099133e-02, 9.015919268e-02, -2.823571861e-02, -9.907126427e-03, 4.950205982e-02, 1.268748939e-02, -1.618044823e-01, -1.372655332e-01, 4.243628681e-02, 1.418152601e-01, 9.711803496e-02, -9.575657547e-02, 9.339644015e-02, 9.198375046e-02, 7.668483257e-02, -1.064590216e-01, -3.524744511e-02, -5.669860542e-02, 8.031761646e-02, 1.535173208e-01, -9.605412185e-02, -1.171151027e-01, -1.278892756e-01, 7.832741737e-02, 3.874234855e-02, -7.219040394e-02, 1.630903631e-01, -1.407869160e-02, 1.058080643e-01, -3.086896241e-02, -1.511486769e-01, -9.892301261e-02, -9.222833812e-02, -4.038386047e-02, -6.462347507e-02, 1.140979081e-01, 6.525953114e-02, -1.209559441e-01, 1.156096011e-01, -1.336220950e-01, 4.642228782e-02, 1.531576663e-01, 1.558025330e-01, 1.575362235e-01, -9.990537167e-02, 6.409481168e-03, 8.144290745e-02, -1.171795949e-01, 5.609624088e-02, 4.380722344e-02, -5.072089285e-02, -1.625527591e-01, -8.694219589e-02, -2.451913059e-02, -1.595765352e-01, 1.497992724e-01, -1.173471659e-01, -2.545802295e-02, 5.665266514e-02, 1.330768019e-01, -1.531568766e-01, -1.000673026e-01, -9.040542692e-02, 9.930269420e-02, -4.772182554e-02, -2.167506516e-02, 1.226361245e-01, 9.039156139e-02, 9.541143477e-02, 5.146646500e-02, 8.987896144e-02, -1.481601894e-01, 5.856113136e-02, 4.131011665e-02, -1.236240491e-01, 1.330401152e-01, 1.031159610e-01, -7.256393135e-02, 1.316096336e-01, 1.287269145e-01, 1.138586253e-01, -1.223052368e-01, -1.610279530e-01, -2.899861336e-02, 8.733515441e-02, -1.564562023e-01, -1.304753721e-01, -3.230531514e-02, -6.879465282e-02, 3.089427948e-02, -2.945876122e-02, 7.931499183e-02, -1.420883834e-01, -2.289800346e-02, -9.758365154e-02, 8.536259830e-02, 4.030902684e-02, 2.982366085e-02, 1.055798978e-01, 1.351108700e-01, 6.967167556e-02, -1.427628696e-01, 9.161521494e-02, -6.857061386e-02, -3.784477711e-02, 1.549978405e-01, 5.864901841e-02, -1.160411537e-02, -1.417455673e-01, -1.640169322e-01, 1.003611088e-02, -1.078047752e-01, 1.247492284e-01, 5.406773090e-02, -9.987309575e-03, -3.362023830e-02, -1.617696732e-01, -1.124624014e-01, -1.644058526e-02, 1.117829531e-01, -6.812994182e-02, 3.338754177e-02, 8.106474578e-02, -1.186061725e-01, -1.618594825e-01, 6.411795318e-02, 5.921168625e-02, -8.990792930e-02, -1.494398564e-01, -1.312934160e-01, -8.236959577e-03, 6.329114735e-02, 8.568467200e-02, -5.396874994e-02, -1.368347853e-01, 1.480425745e-01, 1.625681669e-01, -1.490648240e-01, 5.563516915e-02, -1.699113846e-02, 1.349159628e-01, 7.068231702e-03, -5.262037367e-02, -1.298868656e-01, -6.241604686e-03, 1.271603256e-01, 5.039453506e-02, -3.320117295e-02, 1.594886035e-01, 2.190022171e-02, 8.137305081e-02, -2.063870430e-02, -1.433254480e-01, 5.852718651e-02, -1.164674759e-04, -1.514935493e-01, 1.388873309e-01, -1.372404546e-01, -1.153690815e-01, 7.805891335e-02, -1.286907494e-02, 1.005365103e-01, -8.337724209e-02, -1.202356815e-02, 1.095549315e-01, -1.342542171e-01, 1.539633721e-01, -1.068562269e-04, -1.225365400e-01, 9.638667107e-03, 7.937519252e-02, -1.490053385e-01, 4.947085679e-02, 1.465850621e-01, -2.603471279e-02, -1.382009685e-01, 7.924799621e-02, -5.741751194e-02, 9.484787285e-02, -9.934142232e-03, -8.076310158e-02, -6.783202291e-03, 7.803697884e-02, -7.359266281e-02, 1.405604333e-01, 1.104541272e-01, 3.597672284e-02, -8.624002337e-03, -1.517578065e-01, -1.020641774e-01, 1.455344111e-01, -3.301401436e-02, 7.623147964e-02, 1.473870426e-01, 1.200077981e-01, -1.203754395e-01, -1.785075665e-02, -1.411323249e-01, 1.461819559e-01, 9.293706715e-02, 1.439403445e-01, -2.185571194e-02, 1.176319867e-01, 1.059198380e-02, 1.220474392e-01, -5.923998356e-02, 8.841519058e-02, -5.675487220e-02, -7.880370319e-02, -1.120169163e-01, -1.309061050e-01, 2.751815319e-02, 1.779937744e-02, -1.040660143e-01, -1.521217823e-02, -1.021936387e-01, -1.031797379e-01, -4.672019184e-02, -8.226697147e-02, -5.816309154e-02, 1.511830837e-01, 8.270828426e-02, 3.031706810e-02, 7.384280860e-02, 6.044869125e-02, -8.060431480e-02, -5.119796842e-02, -4.784278572e-02, -1.023586243e-01, 7.246260345e-02, -4.172738642e-02, 1.158540398e-01, -1.062710732e-01, -7.951422781e-02, 1.502249688e-01, 9.421177208e-02, -4.815741628e-02, -2.059385180e-03, 1.542786509e-01, 8.946613967e-02, 1.474535614e-01, -1.595957279e-01, -9.297236055e-02, 9.368999302e-02, 5.631120503e-02, 1.156497449e-01, -5.005534738e-02, 8.177237213e-02, -7.267852873e-02, 1.463351697e-01, -7.357704639e-02, 1.573076397e-01, -5.589850992e-02, -1.459048986e-01, -1.288208216e-01, -7.535660267e-02, 7.648324966e-02, -9.242109954e-02, -5.013954639e-02, 6.100161374e-02, 2.987766266e-02, 1.077255160e-01, -1.394156218e-01, -1.227804050e-01, -4.374679178e-02, 1.210839897e-01, 1.099460572e-01, -8.829482645e-02, -1.048918590e-01, -1.087617874e-02, -1.026076898e-01, -1.545393467e-01, 1.410902292e-01, 6.079475582e-02, 6.278805435e-02, -1.061993837e-01, -1.424543560e-01, 3.893692791e-02, 9.847940505e-02, -2.239353955e-02, 5.448432267e-02, 1.104116440e-03, 4.923684895e-02, 2.807855606e-02, 9.559883177e-02, 6.164908409e-02, -3.053748608e-02, -7.820916176e-02, 3.983128071e-02, -6.129944324e-02, 1.534322947e-01, 2.672836185e-03, 3.369271755e-02, -2.961361408e-02, 6.507591903e-02, 1.462053210e-01, -9.183697402e-02, 8.422143757e-02, -8.243247867e-03, -1.485015601e-01, 1.145838946e-01, -2.244465053e-02, -1.386990994e-01, 1.402438432e-01, -3.980410099e-02, 1.012005955e-01, 1.509372741e-01, 1.026161164e-01, -8.000584692e-02, 1.480810344e-02, -2.147912979e-02, 3.088696301e-02, 7.366847992e-02, -1.524831504e-01, -3.791257739e-03, -1.554630697e-01, 8.323237300e-03, -7.296367735e-02, -1.453063190e-01, -3.118586540e-02, -1.274517477e-01, 9.826660156e-03, 4.009723663e-03, -1.280733049e-01, -9.285621345e-02, 9.310539067e-02, 8.075869083e-02, 8.178040385e-03, 1.204412729e-01, 6.629204750e-02, 1.395491809e-01, -1.259905547e-01, -1.354022026e-01, 6.084394455e-02, -8.168347925e-02, 1.164834946e-01, -1.403200328e-01, 1.370771229e-02, -1.246780977e-01, -2.659733593e-02, -1.243723631e-01, 9.679977596e-02, 1.519896537e-01, -1.148351878e-01, -1.301639527e-01, 7.049798965e-03, -1.204119548e-01, -4.363457859e-02, 5.208094418e-02, -4.086668789e-02, 2.905459702e-02, -6.319455802e-02, 5.416853726e-02, -1.456255913e-01, 1.627124697e-01, 8.130638301e-02, 1.819030941e-02, 1.293134838e-01, -6.212147325e-02, -1.683099568e-02, -1.243735179e-01, -7.251270860e-02, 7.582063973e-02, -8.550731838e-02, 1.401862353e-01, 1.109882742e-01, 5.015031993e-02, -1.814146340e-02, 1.399972588e-01, -9.318693727e-02, -8.067254722e-02, -1.031139717e-01, -3.926952183e-02, 1.029956788e-01, 9.670202434e-02, 2.549433708e-02, -1.424407214e-01, -8.345691860e-02, 3.948414326e-02, -4.279168695e-02, 6.342582405e-02, -1.073832810e-02, -4.170262814e-02, 1.543839425e-01, -8.268972486e-02, 1.571760923e-01, 7.123275101e-02, 1.397490948e-01, 7.632780075e-02, 1.250185221e-01, -8.091597259e-02, -6.322952360e-02, -1.294243038e-01, 1.637143344e-01, -1.497584283e-01, 1.141173989e-01, -1.313060522e-01, 1.261230260e-01, 4.854631424e-02, -3.014877439e-03, -1.567192525e-01, 4.544894397e-02, 7.180126011e-02, 3.981502354e-02, -2.299122512e-02, 4.602117836e-02, 7.672369480e-02, 1.520737857e-01, 2.248413861e-02, 1.505649090e-02, 3.284767270e-03, 6.115555763e-02, -5.715139955e-02, -5.250024796e-02, 1.507551819e-01, -1.550099105e-01, 6.606753170e-02, 1.544073373e-01, -1.564958543e-01, -3.482143581e-02, -3.303606808e-02, -1.492458582e-01, -1.052391976e-01, -7.219533622e-02, 9.377868474e-02, -1.654029787e-01, -1.608129442e-01, -1.491125077e-01, 1.416409165e-01, -1.602828503e-02, 3.034992516e-02, 3.586366773e-03, -9.076126665e-02, -1.191781759e-01, -1.248388290e-01, -1.541695297e-01, 8.402456343e-02, -1.390151232e-01, -1.249613389e-01, -5.419993401e-02, -5.222468078e-02, -4.937641323e-02, -1.100666150e-01, 1.065641791e-01, -1.647031307e-02, -1.396406889e-01, -1.010222435e-01, 3.172266483e-02, -1.039838046e-01, 1.075050980e-01, 1.339033395e-01, 6.568996608e-02, 1.536632925e-01, -7.025321573e-02, -2.102091908e-03, 9.388674796e-02, 3.626088798e-02, -8.899430931e-02, -6.307836622e-02, 7.162280381e-02, 3.544485569e-02, -4.733145237e-02, -2.461738884e-02, 9.943549335e-02, -1.073276624e-01, -3.513292968e-02, 5.631363392e-02, -4.371666908e-02, -1.427721977e-01, -1.150640696e-01, -1.374166459e-01, 2.108561993e-02, -6.409609318e-02, 1.425883323e-01, 1.953728497e-02, -6.025004387e-02, 2.704770863e-02, -2.172128856e-02, -8.672245592e-02, -2.576045692e-02, -2.486813068e-02, -6.472361088e-02, -1.364244223e-01, -1.240058243e-02, -1.466795206e-01, -4.323454946e-02, -8.544012159e-02, -7.138967514e-02, -7.553526014e-02, -1.649523228e-01, -9.635333717e-02, -1.526626348e-01, 7.324536145e-02, 1.082640439e-01, -5.106966197e-02, 1.490622908e-01, -1.403050870e-01, 4.375894368e-02, -7.643620670e-02, 7.607643306e-02, -9.209251404e-02, -8.783185482e-02, 2.439899743e-02, -5.007763952e-02, 6.739094853e-03, 1.167180985e-01, -1.231965274e-01, 5.873946846e-02, -1.575417519e-01, 1.695398986e-02, -9.224939346e-02, 1.112183481e-01, 7.151715457e-02, -1.515726298e-01, 3.209738433e-02, 1.388990432e-01, -1.330821961e-01, -9.643912315e-02, -4.850749671e-02, -8.448358625e-02, 4.846103489e-02, 3.031380475e-02, -6.327831745e-02, -1.472544670e-02, 1.290340871e-01, 1.221491247e-01, -1.324423254e-01, 6.023104489e-02, -1.439693868e-01, 1.609968692e-01, 3.028114140e-02, -1.280303001e-01, 7.327969372e-02, -3.281839192e-02, 1.588869095e-02, -2.907569706e-02, -1.092286110e-01, -8.118371665e-02, -1.466543674e-01, -1.079498529e-01, 2.124388516e-02, 2.867396176e-02, -3.229737282e-02, 6.978316605e-02, 7.873728871e-03, -8.675535768e-02, 2.567867935e-02, -1.150804013e-01, 6.033018231e-03, 1.240825206e-01, 1.465515792e-02, -1.605544090e-01, -8.390661329e-02, 1.393845826e-01, -2.631600201e-02, 3.191876411e-02, -1.439557523e-01, -1.523843706e-01, 3.018470109e-02, -8.514114469e-02, -9.751363844e-02, 2.149283886e-02, 2.263288200e-02, -8.555118740e-02, 1.634475142e-01, 1.725296676e-02, 1.285602301e-01, -4.328000546e-02, 9.177748859e-02, 1.357071549e-01, -1.489273757e-01, -1.564368904e-01, -1.013465747e-01, -1.130490750e-01, -1.017758846e-01, -3.638207912e-02, 8.187372983e-02, 2.830171585e-02, 1.127743274e-01, -1.356875151e-01, 1.538279802e-01, -9.282164276e-02, -1.028855294e-01, -7.963304222e-02, -6.317421049e-02, 7.847893238e-02, 1.511631161e-01, -9.897331893e-02, 7.382158935e-02, -5.549860001e-02, 1.167343408e-01, -7.401891798e-02, -1.253002882e-01, -1.260385513e-01, 3.893618286e-02, -1.418576241e-01, 1.579746753e-01, -1.661487073e-01, 3.802132607e-02, -8.669607341e-02, 4.971866310e-02, -1.214527339e-01, -5.477409065e-02, 1.348155290e-01, -7.474669069e-02, -1.195506305e-01, 1.479674131e-01, -1.310804784e-01, -1.509973705e-01, -1.238442659e-01, 1.117017418e-01, 1.229536980e-01, -7.304378599e-02, -2.966925502e-03, -1.140383109e-01, -1.423916519e-01, -8.973018825e-02, 8.164314926e-02, -1.194909811e-01, 1.324753016e-01, -1.323510408e-01, 2.847909927e-03, -1.402898729e-01, -1.445050687e-01, -5.865359306e-02, -5.393330753e-02, 1.115468889e-01, 3.904037178e-02, 5.626387894e-02, 1.302269250e-01, -6.212230772e-02, -1.168499812e-01, -9.714536369e-02, 8.257777989e-02, -1.478625983e-01, 2.101683617e-02, 2.683527768e-02, -7.423921674e-02, 2.826969326e-02, -7.407248020e-02, -9.830093384e-02, -7.852749527e-02, 1.558561623e-02, -1.663714647e-04, 1.271355301e-01, -1.181513518e-01, -7.676681131e-02, -1.173416823e-01, -1.587431878e-01, -1.636855304e-01, 8.797471225e-02, 9.148491919e-02, -4.882073402e-02, 7.311443985e-02, -3.659896553e-02, -2.891480923e-02, 1.361477375e-02, 1.532578617e-01, -1.031295061e-01, 6.556777656e-02, -1.554250419e-01, 4.956527054e-02, -9.671060741e-02, -3.342433274e-02, 3.501904011e-02, 6.921966374e-02, 1.133273393e-01, -1.282223910e-01, 7.163889706e-02, -1.830796897e-02, 1.742124557e-02, -1.238538474e-01, -1.069608927e-01, 8.469094336e-02, 2.623052895e-02, 9.332184494e-02, 6.681959331e-02, 9.007589519e-02, 8.566062152e-02, 1.048286110e-01, -4.730264843e-02, -3.333699703e-02, 1.414565593e-01, -1.151159629e-01, 1.618544608e-01, 6.636460125e-02, 1.008311063e-01, -8.753474802e-02, -1.264965981e-01, -1.237918958e-01, -1.380471885e-02, -1.451790333e-02, 2.648790181e-02, -9.245321155e-03, 9.732009470e-02, -1.453289241e-01, -1.538367271e-01, 1.150596589e-01, -3.018312156e-02, -9.473129362e-02, 7.199740410e-02, -1.305427998e-01, 5.273127556e-02, 1.065146923e-02, -9.720087051e-03, -1.590443552e-01, 4.161055386e-02, -2.711594105e-02, -3.323595226e-02, 8.098080754e-03, 8.477778733e-02, 1.518084556e-01, -4.023270309e-02, -1.802487671e-02, 7.786734402e-02, 5.552768707e-03, -4.571553320e-02, 4.686355591e-02, -1.017230004e-01, 1.241725236e-01, -1.353657693e-01, -3.366331756e-02, 9.284199774e-02, 1.077013165e-01, -1.627658308e-01, 1.232432574e-01, -1.091484278e-01, 5.523812771e-02, 3.595249355e-02, 6.334860623e-02, 1.559186429e-01, 1.303920895e-01, 2.171084285e-03, -1.261371374e-01, -1.093871221e-01, -1.362161338e-02, -1.333614588e-01, -5.522131920e-03, -1.000817120e-02, -9.157431126e-02, 1.270133406e-01, 1.207205206e-01, -7.770165056e-02, 1.262582093e-01, -4.472836107e-02, -2.874521911e-02, 4.199016094e-02, -1.609594524e-01, -1.499406993e-02, 1.453243941e-01, 1.231770068e-01, 4.399514198e-02, 1.150877029e-01, -1.365556419e-01, -9.181594849e-02, -7.625456899e-02, -9.775066376e-02, -3.274250031e-02, 1.414010972e-01, -1.449651420e-01, -1.288950890e-01, 1.506062001e-01, -1.454821080e-01, -1.421856880e-02, -1.532630622e-01, 1.336665303e-01, 8.648659289e-02, 1.481585056e-01, -1.500144452e-01, -1.253834963e-01, 2.776093781e-02, -2.237455547e-02, 6.687581539e-02, -1.937480271e-02, -7.548952103e-02, -1.620091647e-01, -5.328933895e-02, 1.493837982e-01, -9.448961914e-02, -4.151587188e-02, -1.112222672e-01, 4.494635761e-02, -1.371593773e-02, 2.827894688e-02, -6.575664133e-02, 1.326857954e-01, -2.188222110e-02, 1.942348480e-02, -9.751319885e-03, -5.322702974e-02, -9.122069925e-02, 1.412915140e-01, 3.188478947e-02, -1.530246437e-01, 1.125961989e-01, 6.367151439e-02, -1.048183888e-01, -4.759526253e-02, -1.296676397e-01, 1.422605067e-01, -6.467354298e-02, -8.368917555e-02, 1.549961120e-01, 8.754654229e-02, 1.317496747e-01, 4.037912190e-02, -3.745286167e-02, 9.006766975e-02, -1.122123450e-01, 9.877376258e-02, 1.035292447e-02, -4.203677177e-02, -9.923466295e-02, 1.277978867e-01, 4.897832870e-02, 1.261516064e-01, -3.827150166e-02, -2.986991405e-02, 8.134920895e-02, -7.839751244e-02, 3.636009991e-02, 4.243776202e-03, 5.137030780e-02, -1.408027411e-01, 6.740875542e-02, -4.658742994e-02, 8.054368198e-02, -7.060345262e-02, 6.845577061e-02, 8.289173245e-03, 6.796526909e-02, 5.042517185e-02, -1.300469339e-01, 4.586863518e-02, -4.542919248e-02, -1.610220671e-01, 5.075290799e-03, 2.900438011e-02, 1.513891667e-01, -4.416485876e-02, -9.189021587e-02, -8.244045824e-02, 1.614203006e-01, 1.253533810e-01, 6.195163727e-02, -4.841395468e-02, -1.023767814e-01, -7.360887527e-02, 4.630799592e-02, 8.082556725e-02, 2.644217014e-02, -8.456262201e-02, 1.206897944e-01, 4.834854603e-02, 7.046099007e-02};
    constexpr std::array<Scalar, 8> convBias_2 = {1.094819108e-23, -6.176132444e-24, 5.891134354e-24, 3.592993605e-24, -1.527631510e-24, -4.776752836e-23, -3.054194704e-24, -1.978715112e-23};

    // Layer 3: Conv2D
    constexpr std::array<Scalar, 72> convKernel_3 = {4.348745942e-02, 2.615575790e-01, 7.087698579e-02, -1.934751868e-02, -2.586997747e-01, 1.447273791e-01, 1.722485721e-01, 1.480490863e-01, -1.086941361e-02, 1.242378354e-02, 2.270676494e-01, 1.011491418e-01, 2.323566675e-01, -3.507734835e-02, 1.206909418e-01, -1.567785740e-01, 2.275188267e-01, 1.090281904e-01, -2.647707462e-01, -1.943782270e-01, 1.656929255e-01, -2.039515376e-01, 1.148801744e-01, -1.692887843e-01, -1.996138692e-02, 2.361802459e-01, 1.878239512e-01, 2.115003765e-01, 9.237527847e-04, -1.077573448e-01, 2.227148116e-01, 8.782783151e-02, -1.943068504e-01, -2.645701170e-01, -1.451425552e-01, -9.907820821e-02, 3.745728731e-02, -2.263855934e-01, 1.784519255e-01, 1.467547119e-01, -5.924673378e-02, 4.745674133e-02, 1.668583453e-01, -9.759604931e-03, -6.256622076e-02, 1.711639464e-01, 9.633713961e-02, 1.121938229e-01, -7.822011411e-02, -2.431992739e-01, 6.074398756e-02, 1.852502525e-01, 2.209022641e-01, -3.495451808e-02, -3.511069715e-02, -1.964452863e-01, -2.007675171e-02, -4.215574265e-02, 3.588724136e-02, 7.659018040e-03, -7.219611108e-02, 2.478742003e-01, -2.685304284e-01, 1.604183316e-01, -1.510121226e-01, -1.390575618e-01, 1.452296972e-03, 1.517726183e-01, 2.359611392e-01, 5.992484093e-02, -1.647319794e-01, 2.198053598e-01};
    constexpr std::array<Scalar, 1> convBias_3 = {-1.565625516e-24};


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    auto relu = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        output = input > 0 ? input : 0;
    };

    auto linear = +[](Scalar& output, Scalar input, Scalar alpha) noexcept {
        output = input;
    };


//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\//\\// 


    // Conv2D, layer 1
    static std::array<Scalar, (96 * 96 * 16)> layer_1_output;
    Conv2D<Scalar, 16, 96, 96>(
        layer_1_output.data(), model_input.data(),
        convKernel_1.data(), convBias_1.data(),
        1, 96, 96,
        3, 3, 1, 1, 1, 1,
        relu, 0.0);

    // Conv2D, layer 2
    static std::array<Scalar, (96 * 96 * 8)> layer_2_output;
    Conv2D<Scalar, 8, 96, 96>(
        layer_2_output.data(), layer_1_output.data(),
        convKernel_2.data(), convBias_2.data(),
        16, 96, 96,
        3, 3, 1, 1, 1, 1,
        relu, 0.0);

    // Conv2D, layer 3
    static std::array<Scalar, (96 * 96 * 1)> layer_3_output;
    Conv2D<Scalar, 1, 96, 96>(
        layer_3_output.data(), layer_2_output.data(),
        convKernel_3.data(), convBias_3.data(),
        8, 96, 96,
        3, 3, 1, 1, 1, 1,
        linear, 0.0);

    // Conv2D, layer 4
    static std::array<Scalar, 9216> layer_4_output;
    Reshape<Scalar, 9216>(
        layer_4_output.data(), layer_3_output.data());

    // Final output
    static std::array<std::array<Scalar, 96>, 96> model_output;
    for(int i = 0; i < 96; i++) {
        for(int j = 0; j < 96; j++) {
            model_output[i][j] = layer_4_output[i * 96 + j];
        }
    }

    return model_output;
}
