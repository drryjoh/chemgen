#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass elsarticle
\begin_preamble
% specify here the journal
\journal{Computer Physics Communications}

% use this if you need line numbers
\usepackage{algpseudocode,algorithm,algorithmicx}
\usepackage{tikz}
\usetikzlibrary{shapes,arrows,calc,decorations.pathreplacing}
\end_preamble
\options 3p
\use_default_options false
\begin_modules
theorems-std
\end_modules
\maintain_unincluded_children no
\language english
\language_package default
\inputencoding utf8
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine natbib
\cite_engine_type authoryear
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification false
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\headheight 2cm
\headsep 2cm
\footskip 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 2
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
ChemGen:
 Malleable Chemistry Reaction Code Generation for Computational Physics
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
author{Ryan F.
 Johnson,
 Eric J.
 Ching,
 and Andrew D.
 Kercher}
\end_layout

\begin_layout Plain Layout


\backslash
address{Laboratories for Computational Physics and Fluid Dynamics,
  U.S.
 Naval Research Laboratory,
 4555 Overlook Ave SW,
 Washington,
 DC 20375}
\end_layout

\begin_layout Plain Layout


\backslash
author{Joshua Ethan Lipman,
 Ethan Genter,
 Hai Wang}
\end_layout

\begin_layout Plain Layout


\backslash
address{Stanford University}
\end_layout

\end_inset


\end_layout

\begin_layout Keywords
lalal
\end_layout

\begin_layout Abstract
lalalal
\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\middlebar}{\,\middle|\,}
{\mathrm{|}}
\end_inset


\begin_inset FormulaMacro
\newcommand{\average}[1]{\left\{  \!\!\left\{  #1\right\}  \!\!\right\}  }
{\left\{ \left\{ #1\right\} \right\} }
\end_inset


\begin_inset FormulaMacro
\newcommand{\expnumber}[2]{{#1}\mathrm{e}{#2}}
{{#1}\mathrm{e}{#2}}
\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout

 
\backslash
newcommand*{
\backslash
horzbar}{
\backslash
rule[.5ex]{2.5ex}{0.5pt}}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Note
status open

\begin_layout Plain Layout
First macro is color,
 second is no color:
\end_layout

\end_inset


\begin_inset FormulaMacro
\newcommand{\revisionmathone}[1]{\textcolor{red}{#1}}
{\textcolor{red}{#1}}
\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
\begin_inset FormulaMacro
\newcommand{\revisionmath}[1]{#1}
{#1}
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\revisionmathtwo}[1]{\textcolor{blue}{#1}}
{\textcolor{red}{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\revisionmaththree}[1]{\textcolor{teal}{#1}}
{\textcolor{red}{#1}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
makeatletter 
\backslash
def
\backslash
ps@pprintTitle{  
\backslash
let
\backslash
@oddhead
\backslash
@empty  
\backslash
let
\backslash
@evenhead
\backslash
@empty  
\backslash
def
\backslash
@oddfoot{
\backslash
centerline{
\backslash
thepage}}  
\backslash
let
\backslash
@evenfoot
\backslash
@oddfoot} 
\backslash
makeatother
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
let
\backslash
svthefootnote
\backslash
thefootnote
\backslash
let
\backslash
thefootnote
\backslash
relax
\backslash
footnotetext{
\backslash

\backslash
 
\backslash
hspace*{65pt}DISTRIBUTION STATEMENT A.
 Approved for public release.
 Distribution is unlimited.}
\backslash
addtocounter{footnote}{-1}
\backslash
let
\backslash
thefootnote
\backslash
svthefootnote
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset Tabular
<lyxtabular version="3" rows="27" columns="4">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<column alignment="left" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Symbol
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Definition
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Units
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $c_{p}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Specific heat at constant pressure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $J/kg$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $c_{v}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Specific heat at constant volume
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $J/kg$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $C_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Concentration of species 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $kmol/m^{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $C$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Concentration vector of all species
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $kmol/m^{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\bar{D}_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mass averaged diffusion Coefficient
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m^{2}/s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $D_{ij}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Diffusion coefficient of species 
\begin_inset Formula $i$
\end_inset

 to species 
\begin_inset Formula $j$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m^{2}/s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mathrm{DG}(p=a)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Discontinuous Galerkin solution where 
\begin_inset Formula $a$
\end_inset

 is the polynomial degree
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $e_{t}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total energy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $J/kg$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\gamma$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ratio of specific heats
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $c_{p}/c_{v}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $h_{t}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Total enthalpy,
 species specific has subscript 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $J/kg$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $h$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
grid spacing
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\lambda$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Conductivity,
 species specific has subscript 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $J/\left(m\cdot s\cdot K\right)$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\mu$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Viscosity,
 species specific has subscript 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m^{2}/s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $n_{s}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Number of species
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $p$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Pressure
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $kg\cdot m/s^{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $R^{o}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Universal gas constant,
 
\begin_inset Formula $8314.4621$
\end_inset

,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\xout off
\uuline off
\uwave off
\noun off
\color none
\begin_inset Formula $J/\left(kmol\cdot K\right)$
\end_inset


\family default
\series default
\shape default
\size default
\emph default
\bar default
\strikeout default
\xout default
\uuline default
\uwave default
\noun default
\color inherit

\begin_inset Formula $\frac{}{}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\rho$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Density,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $kg/m^{3}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $t$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
time
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $T$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Temperature of gas,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $K$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\tau$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Dyadic Stress tensor,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $kg\cdot m/s^{2}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $u$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Internal energy,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $J/kg$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $v$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Velocity,
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m/s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $V_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Species diffusion velocity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $m/s$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $W_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Molecular weight of species 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $kg/kmol$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $X_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mole fraction of species 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $Y_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Mass fraction of species 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Introduction
\begin_inset CommandInset label
LatexCommand label
name "sec:Introduction"

\end_inset


\end_layout

\begin_layout Standard
Chemical reactions are at the heart of many engineering applications,
 including propulsion,
 energy conversion,
 materials processing,
 and environmental control.
 These reactions govern how energy is released,
 how materials are transformed,
 and ultimately how the performance and efficiency of a system are determined.
 In many of these environments,
 the underlying physics are too complex for simplified analytical approaches,
 as chemical time scales are often orders of magnitude shorter than those of the overall system which can also be geometrically complex.
 These complexities necessitate the use of computational physics,
 leveraging advanced software and high-performance computing to achieve predictive capabilities.
 One of the most prominent areas where chemistry and computation intersect is in the modeling of reactive fluid flows.
 In such systems,
 from ground-based power-generating combustors to high-speed propulsion devices,
 the interaction between fluid dynamics and chemical kinetics is tightly coupled and highly nonlinear.
 Accurately capturing this behavior requires computational fluid dynamics (CFD) frameworks capable of resolving not only the conservation of mass,
 momentum,
 and energy,
 but also the detailed evolution of reacting species.
\end_layout

\begin_layout Standard
CFD is a widely recognized scientific and engineering tool for understanding or predicting fluid behavior in situations where experimental data is limited or unavailable,
 and analytical solutions do not exist
\begin_inset CommandInset citation
LatexCommand citet
key "And95,Fer02,Hir07"
literal "false"

\end_inset

.
 The core function of CFD is to solve for conserved quantities,
 such as mass,
 momentum,
 and energy that satisfy conservation equations in space and time across a defined domain.
 This requires discretizing the conservation equations,
 such as the Navier-Stokes equations,
 using methods such as the finite volume
\begin_inset CommandInset citation
LatexCommand citet
key "Pat80,Ver07,Mou16"
literal "false"

\end_inset

,
 finite difference
\begin_inset CommandInset citation
LatexCommand citet
key "LeV07"
literal "false"

\end_inset

,
 or finite element approaches
\begin_inset CommandInset citation
LatexCommand citet
key "Don03,Zie05"
literal "false"

\end_inset

.
 CFD relies on large volumes of data to describe the fluid,
 stored at specific points within the domain,
 known as degrees of freedom (DoF).
 At each degree of freedom,
 the conserved variables are calculated based on the evolution of the conservation variables dictated by the modeled conservation equations.
\end_layout

\begin_layout Standard
Developing robust CFD software is an accomplishment in itself,
 given the multitude of challenging computational and numerical issues.
 The computational issues include efficient DoF communication in parallel,
 adaptive physical modeling,
 parallel computation,
 and managing complex geometries.
 Additionally,
 there are significant numerical challenges,
 such as stability-preserving methods
\begin_inset CommandInset citation
LatexCommand citet
key "Kar94,Abg96,Bil03,Lv15,Lv17,Joh20,Chi22,Chi22_2"
literal "false"

\end_inset

 as well as flux representation strategies.
 In general,
 complexities also arise in applicable temporal integration techniques.
 There is no single CFD software that seamlessly addresses all these diverse challenges,
 prompting continued research into a wide range of computational and numerical strategies aimed at accelerating simulations while maintaining robust fluid modeling.
 As a result,
 a broad family of CFD codes has emerged,
 ranging from experimental in-house tools used to demonstrate new technologies to established commercial software suites employed in production-level engineering simulations.
\end_layout

\begin_layout Standard
CFD focuses on the conservation variables related to mass,
 momentum,
 and energy of the fluid.
 For example,
 a three-dimensional compressible fluid simulation involves five primary continuum variables:
 energy,
 mass,
 and a three-component momentum vector.
 This gives 
\begin_inset Formula $n_{y}=n_{c}=5$
\end_inset

,
 where 
\begin_inset Formula $n_{c}$
\end_inset

 is the number of conserved non-reacting variables,
 and 
\begin_inset Formula $n_{y}$
\end_inset

 is the total state size.
 In many cases,
 existing non-reacting CFD software built around these five variables can be adapted for chemically reacting flows by expanding the state to include chemical species.
 This adaptation involves extending the state size to encompass the chemical species necessary to model reactions,
 calculating their fluxes along with the original variables,
 and incorporating 
\begin_inset Formula $n_{r}$
\end_inset

 chemical reactions.
 This increases the state size to 
\begin_inset Formula $n_{y}=n_{s}+n_{c}$
\end_inset

 ,
 where 
\begin_inset Formula $n_{s}$
\end_inset

 represents the number of chemical species.
 Detailed chemical mechanisms may involve hundreds of species and thousands of reactions,
 typically with 
\begin_inset Formula $n_{r}\approx5n_{s}$
\end_inset


\begin_inset CommandInset citation
LatexCommand citet
key "Lu09"
literal "false"

\end_inset

.
 The number of species increases with the complexity of the fuel,
 for instance the model for hydrogen is 10 chemical species with 17 reactions
\begin_inset CommandInset citation
LatexCommand citet
key "Wes82,Chi22_2"
literal "false"

\end_inset

 and the FFCM2 model for simple hydrocarbons (up to four carbons per chemical species) is 96 species with 1054 reactions
\begin_inset CommandInset citation
LatexCommand citet
key "Zha23"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
In order to adapt the most fundamental chemically reacting flow into an existing single component CFD software three main features must be added:
\end_layout

\begin_layout Enumerate

\series bold
The thermodynamics must be updated to thermally perfect equation of state.

\series default
 Most single-component formulations assume frozen gas thermodynamics,
 where pressure is directly related to internal energy.
 However,
 this assumption does not hold for multicomponent systems,
 requiring careful adjustments to ensure consistent computations between energy and temperature and pressure dependent relationships.
\begin_inset CommandInset label
LatexCommand label
name "enu:thermo"

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
The ability to compute a source term.
 
\series default
Other than external forcing or simple bouyancy forces,
 the simplest CFD Navier-Stokes models typically do not include a source term.
 In most models,
 momentum,
 energy,
 and mass have no sources or sinks to add or remove them from the domain;
 instead,
 the conserved variables are transported and diffused.
\begin_inset CommandInset label
LatexCommand label
name "enu:source"

\end_inset


\end_layout

\begin_layout Enumerate

\series bold
Multicomponent transport models.
 
\series default
Mixture based transport quantities,
 such as viscosity and conductivity,
 would need to be adapted to multicomponent mixture models.
 In addition,
 the diffusion of each species needs to be considered with a transport method as well.
 These terms or structured similar to that of conductive and viscous fluxes that follow a Fickian diffusion assumption.
\end_layout

\begin_layout Standard
There are several approaches to integrate these features,
 with the most common being:
\end_layout

\begin_layout Enumerate
Locate and adapt existing Fortran code from early versions of Chemkin
\begin_inset CommandInset citation
LatexCommand citet
key "chemkin89"
literal "false"

\end_inset

 for the target CFD.
\begin_inset CommandInset label
LatexCommand label
name "enu:chemkin"

\end_inset


\end_layout

\begin_layout Enumerate
Use the more widely adopted,
 open-source,
 and actively maintained Cantera 
\begin_inset CommandInset citation
LatexCommand citet
key "cantera"
literal "false"

\end_inset

,
 which can serve as a third-party library in C++ and Fortran source codes,
 as well as in interpretive languages like Python and MATLAB.
\begin_inset CommandInset label
LatexCommand label
name "enu:cantera"

\end_inset


\end_layout

\begin_layout Enumerate
Manually code new physical models,
 such as source term reactions,
 thermodynamic fits,
 and transport properties.
\begin_inset CommandInset label
LatexCommand label
name "enu:manual"

\end_inset


\end_layout

\begin_layout Enumerate
Use code generation tools to read the chemical mechanism and produce adaptable source code in the desired format for the CFD software.
\begin_inset CommandInset label
LatexCommand label
name "enu:software"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:chemkin"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 and 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:cantera"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 are reasonable choices for demonstration cases,
 but they present certain challenges.
 With 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:chemkin"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 the existing Chemkin and Senkin routines may not easily adapt to the specific requirements of the targeted CFD software,
 which can limit scalability and complicate code maintenance.
 For 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:cantera"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 although the package is excellent for property calculations and other critical combustion scenarios,
 it is a third-party library and could lead to limited control over software funcionality.
 Imbedding cantera is certainly possible,
 but in some cases data would need to be transferred back and forth between the CFD's degrees of freedom (DoF) and Cantera,
 potentially restricting access to essential computational acceleration techniques.
 Additionally,
 relying on a third-party library like Cantera may hinder compatibility with targeted architectures that Cantera developers cannot directly access.
 Using 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:manual"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 can also be challenging;
 it often requires extensive,
 solitary work by developers,
 as the necessary models would need to be built from scratch (further described in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:governing_equations"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

).
 The focus of this work is 
\begin_inset CommandInset ref
LatexCommand ref
reference "enu:software"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 a tool that can generate source code that is compatible with the existing ecosystem of a target code base,
 with initial focus on CFD.
\end_layout

\begin_layout Standard
\align block
Code generation is a well-established concept,
 with a history in chemistry applications.
 There are two publicly available code generators focused on gas-phase combustion:
 PyJac 
\begin_inset CommandInset citation
LatexCommand citet
key "Nie17"
literal "false"

\end_inset

 and Pyrometheus 
\begin_inset CommandInset citation
LatexCommand citet
key "Cis25"
literal "false"

\end_inset

.
 PyJac specializes in generating analytical source term Jacobians for non-fluid-based states,
 which can be used to speed up the computation of chemical species evolution.
 Pyrometheus generates either C++ header files or Python files for gas-phase combustion calculations,
 incorporating several on-the-fly optimizations to enhance scalability for high-performance computing in CFD.
 Another chemistry based package is Mutation++
\begin_inset CommandInset citation
LatexCommand citet
key "Sco20"
literal "false"

\end_inset

,
 which focus on the thermodynamic and transport properties with emphasis on ionized gases.
\end_layout

\begin_layout Standard
In this work,
 we introduce the first iteration of ChemGen,
 a software package that leverages code generation to integrate multispecies thermodynamics and chemical kinetics into C++ based CFD codes.
 ChemGen utilizes decorators,
 discussed in detail in Section 3,
 to enable flexible C++ code generation tailored to existing software ecosystems.
 ChemGen currently focuses on thermodynamic properties and source term generation and their analytical derivatives.
 The analytical derivatives gives access to Jacobian assembly for various time integration strategies appropriate for CFD.
 In addition,
 compact linear solvers area also supplied by ChemGen to allow problem specific tailoring.
\end_layout

\begin_layout Standard
This paper is organized as follows.
 We begin with an overview of the chemically reacting flow conservation equations used in CFD,
 highlighting where chemistry fits within these formulations,
 including details on multi-species thermodynamics and chemical reaction rates.
 Next,
 we discuss implicit time integration strategies,
 focusing on operator splitting approaches that reduce the problem to a system of ordinary differential equations for chemical state evolution,
 as well as fully coupled formulations.
 We then introduce the code generation process,
 emphasizing how malleability is achieved through the use of decorators.
 Finally,
 we present results validating the accuracy of source term evaluation,
 Jacobian computation,
 and implicit time integration strategies.
 We demonstrate ChemGen’s performance by replacing OpenFOAM’s existing ODE-based chemical integrator in a detonation simulation,
 showing significant speedups enabled by ChemGen’s specialized,
 generated source code.
\end_layout

\begin_layout Section
Governing equations and Thermodynamics 
\begin_inset CommandInset label
LatexCommand label
name "sec:governing_equations"

\end_inset


\end_layout

\begin_layout Standard
On this work,
 we focus on a compressible CFD formulation without viscous terms for simplicity,
 as we only seek to contextualize chemistry in the environment of fluid dynamics.
 It is important to note that ChemGen is suitable for low-Mach flows that decouple pressure from the energy equation,
 to which we comment on later in this section.
 In addition,
 we also provide a path forward to incorporate Here,
 we primarily highlight the interaction between the fluid dynamic state,
 
\begin_inset Formula $y_{f}$
\end_inset

,
 and the chemical state,
 
\begin_inset Formula $y_{c}$
\end_inset

.
 
\end_layout

\begin_layout Standard
The multicomponent chemically reacting compressible Euler equations are given as
\begin_inset Formula 
\begin{equation}
\frac{\partial y_{f}}{\partial t}+\nabla\cdot\mathcal{F}\left(y_{f}\right)-\mathcal{S}\left(y_{f}\right)=0\label{eq:conservation-law-strong-form}
\end{equation}

\end_inset

where 
\begin_inset Formula $t\in\mathbb{R}^{+}$
\end_inset

 is time,
 
\begin_inset Formula $y_{f}(x,t):\mathbb{R}^{d}\times\mathbb{R}^{+}\rightarrow\mathbb{R}^{m}$
\end_inset

 is the conservative state vector (with 
\begin_inset Formula $x=(x_{1},\ldots,x_{d})$
\end_inset

 denoting the physical coordinates),
 
\begin_inset Formula $\mathcal{F}(y_{f}):\mathbb{R}^{m}\rightarrow\mathbb{R}^{m\times d}$
\end_inset

 is the convective flux,
 
\begin_inset Formula $\mathcal{S}(y_{f}):\mathbb{R}^{m}\rightarrow\mathbb{R}^{m}$
\end_inset

 is the chemical source term.
 The fluid dynamic state is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{f}=\left(\rho v_{1},\ldots,\rho v_{d},\rho e_{t},C_{1},\ldots,C_{n_{s}}\right)^{T},\label{eq:reacting-navier-stokes-state}
\end{equation}

\end_inset

where 
\begin_inset Formula $n_{s}$
\end_inset

 is the number of species (which yields 
\begin_inset Formula $m=d+n_{s}+1$
\end_inset

),
 
\begin_inset Formula $\rho$
\end_inset

 is density,
 
\begin_inset Formula $v=\left(v_{1},\ldots,v_{d}\right)$
\end_inset

 is the velocity,
 
\begin_inset Formula $e_{t}$
\end_inset

 is the mass-specific total energy,
 and 
\begin_inset Formula $C=\left(C_{1},\ldots,C_{n_{s}}\right)$
\end_inset

 are the species concentrations.
 The density is computed from the species concentrations as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
\rho=\sum_{i=1}^{n_{s}}\rho_{i}=\sum_{i=1}^{n_{s}}W_{i}C_{i},
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
where 
\begin_inset Formula $\rho_{i}$
\end_inset

 is the partial density and 
\begin_inset Formula $W_{i}$
\end_inset

 is the molecular mass of the 
\begin_inset Formula $i$
\end_inset

-th species.
 The mass fraction of the 
\begin_inset Formula $i$
\end_inset

th species is defined as 
\begin_inset Formula 
\[
Y_{i}=\frac{\rho_{i}}{\rho}.
\]

\end_inset


\end_layout

\begin_layout Standard
\noindent
The 
\begin_inset Formula $k$
\end_inset

th spatial convective flux component is written as
\begin_inset Formula 
\begin{equation}
\mathcal{F}\left(y\right)=\left(\rho v_{k}v_{1}+p\delta_{k1},\ldots,\rho v_{k}v_{d}+p\delta_{kd},v_{k}\left(\rho e_{t}+p\right),v_{k}C_{1},\ldots,v_{k}C_{n_{s}}\right)^{T},\label{eq:reacting-navier-stokes-spatial-convective-flux-component}
\end{equation}

\end_inset

where 
\begin_inset Formula $p$
\end_inset

 is the pressure.
 The mass-specific total energy is the sum of the specific internal and kinetic energies,
 given by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
e_{t}=u+\frac{1}{2}\sum_{k=1}^{d}v_{k}v_{k},
\]

\end_inset

where the (mixture-averaged) mass-specific internal energy,
 
\begin_inset Formula $u$
\end_inset

,
 is the mass-weighted sum of the mass-specific internal energies of each species:
\begin_inset Formula 
\[
u=\sum_{i=1}^{n_{s}}Y_{i}u_{i}.
\]

\end_inset


\end_layout

\begin_layout Standard
The chemical state is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{c}=\left(p,T,\ln T,M_{c},C_{1},\ldots,C_{n_{s}}\right)^{T},\label{eq:reacting-navier-stokes-state-1}
\end{equation}

\end_inset

which is the complete state needed to calculate 
\begin_inset Formula $\mathcal{S}\left(y_{f}\right)$
\end_inset

.
 The species concentrations,
 
\begin_inset Formula $C_{i}$
\end_inset

,
 are all conserved quantities and can be extracted readily extracted from the fluid dynamic state.
 In the next section we expand on how to calculate temperature from internal energy using a nonlinear solve,
 
\begin_inset Formula $\rho u\left(C,T\right)\rightarrow T$
\end_inset

,
 which immediately gives the pressure from the fluid dynamic state
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
p=R^{o}T\sum_{i=1}^{n_{s}}C_{i},
\]

\end_inset

with 
\begin_inset Formula $R^{0}=8314.4621\,\mathrm{JKmol}^{-1}\mathrm{K}^{-1}$
\end_inset

 denoting the universal gas constant.
 It is common to utilize 
\begin_inset Formula $\ln T$
\end_inset

 in the chemical state as a precomputed value to avoid over computing logarithms and incorporate it into optimizations.
 Finally the mixture concentration,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
M_{c}=\sum_{i=1}^{n_{s}}C_{i}=\frac{p}{R^{o}T},
\]

\end_inset

is utilized in various reactions,
 such as third body reactions with no specified efficiencies.
 
\end_layout

\begin_layout Subsection
Thermodynamics
\end_layout

\begin_layout Standard
This work assumes thermally perfect gases,
 with 
\begin_inset Formula $u_{i}$
\end_inset

 given by
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Gio99"
literal "false"

\end_inset


\begin_inset Formula 
\begin{equation}
u_{i}=h_{i}-R_{i}T=h_{\mathrm{ref},i}+\int_{T_{\mathrm{ref}}}^{T}c_{p,i}(\tau)d\tau-R_{i}T,\label{eq:internal_energy_identity}
\end{equation}

\end_inset

where 
\begin_inset Formula $h_{i}$
\end_inset

 is the mass-specific enthalpy of the 
\begin_inset Formula $i$
\end_inset

th species,
 
\begin_inset Formula $R_{i}=R^{0}/W_{i}$
\end_inset

,
 
\begin_inset Formula $T$
\end_inset

 is the temperature,
 
\begin_inset Formula $T_{\mathrm{ref}}$
\end_inset

 is the reference temperature (298.15 K),
 
\begin_inset Formula $h_{\mathrm{ref},i}$
\end_inset

 is the reference-state species formation enthalpy,
 and 
\begin_inset Formula $c_{p,i}$
\end_inset

 is the mass-specific heat capacity at constant pressure of the 
\begin_inset Formula $i$
\end_inset

th species.
 
\begin_inset Formula $c_{p,i}$
\end_inset

 is computed from an 
\begin_inset Formula $n_{p}$
\end_inset

-order polynomial as
\begin_inset Formula 
\begin{equation}
c_{p,i}=\sum_{k=0}^{n_{p}}a_{ik}T^{k},\label{eq:specific_heat_polynomial}
\end{equation}

\end_inset

based on the NASA coefficients
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Mcb93,Mcb02"
literal "false"

\end_inset

.
 For efficiency purposes,
 ChemGen fits the polynomial for 
\begin_inset Formula $c_{p,i}$
\end_inset

 to arbitrary order.
 Thus,
 in order to establish consistent thermodynamics the identity for internal energy must be satisfied from Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:internal_energy_identity"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 The following relationships are used with pre-computed coefficients,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
h_{i}=h_{\text{ref},i}+\sum_{k=0}^{n_{p}}\frac{a_{ik}}{k+1}T^{k+1}=\sum_{k=0}^{n_{p}+1}b_{ik}T^{k}\label{eq:entahlpy-polynomial}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
u_{i}=h_{\text{ref},i}+\sum_{k=0}^{n_{p}}\frac{a_{ik}}{k+1}T^{k+1}-R_{i}T=\sum_{k=0}^{n_{p}+1}c_{ik}T^{k},\label{eq:internal-energy-polynomial}
\end{equation}

\end_inset

Here we target 
\begin_inset Formula $h_{i}(T=298.15\text{K})$
\end_inset

 as a standard enthalpy that can be obtained from the existing NASA coefficients or from utilizing any number of thermodynamics packages,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
h_{\text{ref},i}=h_{i}(T=298\text{K})-\sum_{k=0}^{n_{p}}\frac{a_{ik}}{k+1}\left(298\right)^{k+1},\label{eq:enthalpy-adjustment}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
b_{ik}=\begin{cases}
\frac{a_{i,k-1}}{k}, & k\geqq1\\
h_{\text{ref},i}, & k=0.
\end{cases}\label{eq:enthalpy_coeffs}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
c_{ik}=\begin{cases}
\frac{a_{i,k-1}}{k}, & k>1\\
a_{i,0}-R & k=1\\
h_{\text{ref},i}, & k=0.
\end{cases}\label{eq:internal-energy-coeffs}
\end{equation}

\end_inset

This integration requires two monomial sequences for temperature,
 one to the power 
\begin_inset Formula $n_{p}$
\end_inset

,
 
\begin_inset Formula $T_{n_{p}}=\left(1,T,T^{2},\dots,T^{n_{p}}\right)$
\end_inset

 and one to the power 
\begin_inset Formula $n_{p}+1$
\end_inset

,
 
\begin_inset Formula $T_{n_{p}+1}=\left(1,T,T^{2},\dots,T^{n_{p}+1}\right)$
\end_inset

 which can then be simply contracted with the respective array of coefficients,
 for example 
\begin_inset Formula $u_{i}=\left<A_{i},T_{n_{p}+1}\right>$
\end_inset

 where 
\begin_inset Formula $A_{i}=(c_{i,0},c_{i,1},c_{i,2},\dots,c_{i,n_{p}+1})$
\end_inset

.
\end_layout

\begin_layout Standard
The mass-specific thermodynamic entropy of the mixture is defined as
\begin_inset Formula 
\begin{equation}
s=\sum_{i=1}^{n_{s}}Y_{i}s_{i},\label{eq:entropy-mass-definition}
\end{equation}

\end_inset

with 
\begin_inset Formula $s_{i}$
\end_inset

 given by
\begin_inset Formula 
\begin{equation}
s_{i}=s_{i}^{o}-R_{i}\log\frac{P_{i}}{P_{\mathrm{ref}}},\quad s_{i}^{o}=s_{\mathrm{ref},i}^{o}+\int_{T_{\mathrm{ref}}}^{T}\frac{c_{p,i}(\tau)}{\tau}d\tau,\label{eq:species-entropy-definition}
\end{equation}

\end_inset

where 
\begin_inset Formula $s_{\mathrm{ref},i}^{o}$
\end_inset

 is the species formation entropy at the reference temperature and reference pressure (
\begin_inset Formula $P_{\mathrm{ref}}=1\text{ atm}$
\end_inset

),
 
\begin_inset Formula $s_{i}^{o}$
\end_inset

 denotes the species entropy at atmospheric pressure,
 and 
\begin_inset Formula $P_{i}=C_{i}R^{0}T$
\end_inset

 is the partial pressure.
 The 
\begin_inset Formula $R_{i}\log\frac{P_{i}}{P_{\mathrm{ref}}}$
\end_inset

 which accounts when the gas is not at atmospheric pressure conditions will be utilized in mixture averaged calculations covered later;
 the term depends on concentration as well as temperature and can be addressed downstream of these thermodynamic relations.
 Focusing then on using the Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:specific_heat_polynomial"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 a polynomial for 
\begin_inset Formula $s_{i}^{o}$
\end_inset

 entropy quantity is thus
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
s_{i}^{o}=s_{\mathrm{ref},i}^{o}+a_{o}\ln T+\sum_{k=1}^{n_{p}}\frac{a_{ik}}{k}T^{k}=a_{o}\ln T+\sum_{k=0}^{n_{p}}d_{ik}T^{k},\label{eq:entropy_polynomial}
\end{equation}

\end_inset

where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
d_{ik}=\begin{cases}
\frac{a_{i,k}}{k}, & k\geq1\\
s_{\mathrm{ref},i}^{o} & k=0.
\end{cases}\label{eq:entropy-coeffs}
\end{equation}

\end_inset

Finally the Gibbs free energy per species is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
g_{i}=h_{i}-Ts_{i}^{o}=\sum_{k=0}^{n_{p}+1}b_{ik}T^{k}-\left(a_{o}\ln T+\sum_{k=0}^{n_{p}}d_{ik}T^{k}\right)T=\sum_{k=0}^{n_{p}+1}b_{ik}T^{k}-\left(a_{o}T\ln T+\sum_{k=1}^{n_{p}+1}d_{i,k-1}T^{k}\right)\label{eq:gibbs-deriviation}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
g_{i}=b_{i0}-a_{io}T\ln T+\sum_{k=1}^{n_{p}}\left(b_{ik}-d_{i,k-1}\right)T^{k}+b_{i,n_{p}}T^{n_{p}+1}\label{eq:gibbs-reformatted}
\end{equation}

\end_inset

Which can be represented like the entropy fit as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
g_{i}=-a_{o}T\ln T+\sum_{k=0}^{n_{p}+1}f_{ik}T^{k}\label{eq:gibbs-polynomial}
\end{equation}

\end_inset

This gives two new temperature monomials with additional elements,
 one to the power 
\begin_inset Formula $n_{p}$
\end_inset

 with a 
\begin_inset Formula $\ln T$
\end_inset

,
 
\begin_inset Formula $T_{n_{p},\ln T}=\left(1,T,T^{2},\dots,T^{n_{p}},\ln T\right)$
\end_inset

 and one to the power 
\begin_inset Formula $n_{p}+1$
\end_inset

,
 
\begin_inset Formula $T_{n_{p}+1,T\ln T}=\left(1,T,T^{2},\dots,T^{n_{p}+1},-T\ln T\right)$
\end_inset

 which can then be simply contracted with the respective array of coefficients,
 
\begin_inset Formula $s_{i}=\left<C_{i},T_{n_{p},\ln T}\right>$
\end_inset

 where 
\begin_inset Formula $C_{i}=(d_{i,0},d_{i,1},d_{i,2},\dots,d_{i,n_{p}},a_{0})$
\end_inset

 and 
\begin_inset Formula $g_{i}=\left<C_{i},T_{n_{p}+1,T\ln T}\right>$
\end_inset

 where 
\begin_inset Formula $C_{i}=(f_{i,0},f_{i,1},f_{i,2},\dots,f_{i,n_{p}+1},a_{0})$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
\begin_inset Formula $s_{i}$
\end_inset

 can also be expressed as
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Gio99,Gou20,Gou20_2"
literal "false"

\end_inset


\begin_inset Formula 
\[
s_{i}=s_{\mathrm{ref},i}^{o}+\int_{T_{\mathrm{ref}}}^{T}\frac{c_{v,i}(\tau)}{\tau}d\tau-R_{i}\log\frac{C_{i}}{C_{\mathrm{ref}}},
\]

\end_inset

where 
\begin_inset Formula $C_{\mathrm{ref}}=P_{\mathrm{ref}}/R^{0}T_{\mathrm{ref}}$
\end_inset

 is the reference concentration and 
\begin_inset Formula $c_{v,i}=c_{p,i}-R_{i}$
\end_inset

 is the mass-specific heat capacity at constant volume of the 
\begin_inset Formula $i$
\end_inset

th species.
 Summing up the partial pressures yields the equation of state for the mixture:
 
\begin_inset Formula 
\begin{equation}
P=R^{0}T\sum_{i=1}^{n_{s}}C_{i}.\label{eq:EOS}
\end{equation}

\end_inset


\begin_inset Formula $u_{i}$
\end_inset

,
 
\begin_inset Formula $h_{i}$
\end_inset

,
 and 
\begin_inset Formula $s_{i}^{o}$
\end_inset

 are computed by integrating Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:specific_heat_polynomial"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="1.35in">
<column alignment="center" valignment="top" width="1.95in">
<column alignment="center" valignment="top" width="2.6in">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Thermodynamic Quantity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Fit
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Coefficient Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Species specific heat at 
\end_layout

\begin_layout Plain Layout
constant pressure,
 
\begin_inset Formula $c_{p,i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $c_{p,i}=\sum_{k=0}^{n_{p}}a_{ik}T^{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Re-fit from existing data
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Species specific enthalpy,
 
\begin_inset Formula $h_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $h_{i}=\sum_{k=0}^{n_{p}+1}b_{ik}T^{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $b_{ik}=\begin{cases}
\frac{a_{i,k-1}}{k}, & k\geqq1\\
h_{\text{ref},i}, & k=0
\end{cases}$
\end_inset

;
\end_layout

\begin_layout Plain Layout
\begin_inset Formula $h_{\text{ref},i}=h_{i}(T=298)-\sum_{k=0}^{n_{p}}\frac{a_{ik}}{k+1}\left(298\right)^{k+1}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Species specific internal energy,
 
\begin_inset Formula $u_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $u_{i}=\sum_{k=0}^{n_{p}+1}c_{ik}T^{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $c_{ik}=\begin{cases}
\frac{a_{i,k-1}}{k}, & k>1\\
a_{i,0}-R & k=1\\
h_{\text{ref},i}, & k=0.
\end{cases}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Species specific entropy
\end_layout

\begin_layout Plain Layout
at reference pressure,
 
\begin_inset Formula $s_{i}^{o}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $s_{i}^{o}=a_{o}\ln T+\sum_{k=0}^{n_{p}+1}d_{ik}T^{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $d_{ik}=\begin{cases}
\frac{a_{i,k}}{k}, & k\geq1\\
s_{\mathrm{ref},i}^{o} & k=0.
\end{cases}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Species specific Gibbs
\end_layout

\begin_layout Plain Layout
free energy,
 
\begin_inset Formula $g_{i}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $g_{i}=-a_{i0}T\ln T+\sum_{k=0}^{n_{p}+1}f_{ik}T^{k}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $f_{ik}=\begin{cases}
\left(\frac{1}{k}-\frac{1}{k-1}\right)a_{i,k-1} & n_{p}+1>k>1\\
a_{i,0}-s_{\mathrm{ref},i}^{o} & k=1\\
h_{\text{ref},i} & k=0.
\end{cases}$
\end_inset


\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
It is efficient to utilize the Newton method to extract temperature from internal energy which requires its derivative.
 Internal energy is typically part of a conserved state,
 for instance,
 the total energy formulation as outlined above would have the conserved variable of total energy as:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\rho e_{t}=\rho u+\frac{1}{2}\sum_{k=1}^{d}\rho v_{k}v_{k}
\end{equation}

\end_inset

where the term 
\begin_inset Formula $\frac{1}{2}\sum_{k=1}^{d}\rho v_{k}v_{k}$
\end_inset

 can be computed from other conserved variables,
 momentum 
\begin_inset Formula $\rho v_{k}$
\end_inset

 and species 
\begin_inset Formula $v_{k}=\frac{\rho v_{k}}{\sum W_{i}C_{i}}$
\end_inset

.
 Thus one can directly compute the internal energy at any time:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\rho u=\frac{1}{2}\sum_{k=1}^{d}\frac{\left(\rho v_{k}\right)\left(\rho v_{k}\right)}{\sum_{i}^{n_{s}}W_{i}C_{i}}-\rho e_{t}
\end{equation}

\end_inset

Newton's method are accurate once converged and can be quite efficient when using exact derivatives,
 especially for scalar functions such as energy as a function of temperature,
 which does not require the inversion of a matrix.
 Included in ChemGen is a Newton iteration that is of the form
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
T_{n+1}=T_{n}-\frac{\rho u(T_{n})}{\frac{\partial\rho u(T_{n})}{\partial T}}.\label{eq:netwon_iteration_temperature}
\end{equation}

\end_inset

where 
\begin_inset Formula $T_{n}$
\end_inset

is the current guess (starting from 
\begin_inset Formula $T_{0}$
\end_inset

 an initial prescribed guess) and 
\begin_inset Formula $T_{n+1}$
\end_inset

 is the new guess.
 Here the terms in the fraction are
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\rho u(C,T_{n})=\sum_{i=1}^{n_{s}}W_{i}C_{i}u_{i}(T_{n})=\sum_{i=1}^{n_{s}}W_{i}C_{i}\left<A_{i},T_{n_{p}+1}\right>
\end{equation}

\end_inset

 and
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial\rho u(T_{n})}{\partial T}=\sum_{i=1}^{n_{s}}W_{i}C_{i}\frac{\partial u_{i}(T_{n})}{\partial T}=\sum_{i=1}^{n_{s}}W_{i}C_{i}\left<A_{i},\frac{\partial T_{n_{p}+1}}{\partial T}\right>
\end{equation}

\end_inset

with 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
A_{i}=(c_{i,0},c_{i,1},c_{i,2},\dots,c_{i,n_{p}+1})
\end{equation}

\end_inset

and
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial T_{n_{p}+1}}{\partial T}=\left(0,1,2T,\dots,\left(n_{p}+1\right)T^{n_{p}}\right)
\end{equation}

\end_inset


\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
In the iteration for temperature an optimization can be made considering that the species,
 
\begin_inset Formula $C_{i}$
\end_inset

,
 are frozen.
 The coefficients can be pre-computed before the iterations to remove the need of extra contractions,
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
C_{i}^{\dagger}=(W_{i}C_{i}c_{i,0},W_{i}C_{i}c_{i,1},W_{i}C_{i}c_{i,2},\dots,W_{i}C_{i}c_{i,n_{p}+1})
\end{equation}

\end_inset

which results in
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
T_{n+1}=T_{n}-\frac{\sum_{i=1}^{n_{s}}\left<C_{i}^{\dagger},T_{n_{p}+1}\right>}{\sum_{i=1}^{n_{s}}\left<C_{i}^{\dagger},\frac{\partial T_{n_{p}+1}}{\partial T}\right>}
\end{equation}

\end_inset


\end_layout

\end_inset

Starting with a guess value,
 
\begin_inset Formula $T_{0}$
\end_inset

,
 a target tolerance of 
\begin_inset Formula $\epsilon$
\end_inset

 can be used or a set number of iterations,
 
\begin_inset Formula $n_{T}$
\end_inset

,
 can be used to terminate the Newton iterations.
 It's important to note that a target tolerance could cause small divergences in threaded process,
 so keeping a set number of iterations would be ideal.
 ChemGen generates both target tolerance and set number of iterations.
 In general,
 we have found in our past work that 
\begin_inset Formula $n_{T}=3$
\end_inset

 is sufficient to be within 
\begin_inset Formula $1e-8$
\end_inset

 relative error for a variety of mechanisms at different temperatures.
\end_layout

\begin_layout Subsection
Chemical reaction rates and their ChemGen Representations
\begin_inset CommandInset label
LatexCommand label
name "subsec:chemical-reaction-rates"

\end_inset


\end_layout

\begin_layout Standard
The source term in Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:conservation-law-strong-form"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is a smooth function of the state variables,
 written as
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Kee96"
literal "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{S}\left(y_{f}\right)=\left(0,\ldots,0,0,\omega_{1},\ldots,\omega_{n_{s}}\right)^{T},\label{eq:reacting-navier-stokes-source-term}
\end{equation}

\end_inset

where 
\begin_inset Formula $\omega_{i}$
\end_inset

 is the production rate of the 
\begin_inset Formula $i$
\end_inset

th species,
 which satisfies mass conservation:
\begin_inset Formula 
\begin{equation}
\sum_{i=1}^{n_{s}}W_{i}\omega_{i}=0.\label{eq:chemical-reaction-mass-conservation}
\end{equation}

\end_inset

The production rate is computed as
\begin_inset Formula 
\[
\omega_{i}=\sum_{j=1}^{n_{r}}\nu_{ij}q_{j}.
\]

\end_inset


\begin_inset Formula $n_{r}$
\end_inset

 is the number of reactions,
 
\begin_inset Formula $\nu_{ij}=\nu_{ij}^{r}-\nu_{ij}^{f}$
\end_inset

 is the difference between the reverse (
\begin_inset Formula $\nu_{ij}^{r}$
\end_inset

) and the forward stoichiometric coefficients (
\begin_inset Formula $\nu_{ij}^{f}$
\end_inset

),
 and 
\begin_inset Formula $q_{j}$
\end_inset

 is the rate of progress of the 
\begin_inset Formula $j$
\end_inset

th reaction,
 computed as
\begin_inset Formula 
\begin{equation}
q_{j}=k_{j}^{f}\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{f}}-k_{j}^{r}\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{r}},\label{eq:chemical-reaction-rate-of-progress}
\end{equation}

\end_inset

where 
\begin_inset Formula $k_{j}^{f}$
\end_inset

 and 
\begin_inset Formula $k_{j}^{r}$
\end_inset

 are the forward and reverse rate constants,
 respectively,
 of the 
\begin_inset Formula $j$
\end_inset

th reaction.
 The forward and reverse rate constants are related via the equilibrium constant 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
K_{j}^{e}=\frac{k_{j}^{f}}{k_{j}^{r}}\rightarrow k_{j}^{r}=\frac{k_{j}^{f}}{K_{j}^{e}}\label{eq:reverse_rate}
\end{equation}

\end_inset

where
\begin_inset Formula 
\begin{equation}
K_{j}^{e}=\exp\left(-\frac{\Delta G_{j}'}{R^{0}T}\right)\left(\frac{p_{\mathrm{ref}}}{R^{0}T}\right)^{\sum_{i}\nu_{ij}},\label{eq:equilibrium-constant-1}
\end{equation}

\end_inset

where 
\begin_inset Formula $\Delta G_{j}'$
\end_inset

 is the change in reference-state Gibbs free energy for the 
\begin_inset Formula $j$
\end_inset

th reaction,
 given as
\begin_inset Formula 
\[
\Delta G_{j}'=\sum_{i=1}^{n_{s}}\nu_{ij}g_{i}.
\]

\end_inset

For this the term 
\begin_inset Formula 
\begin{align*}
\left(\frac{p_{ref}}{R^{0}T}\right)^{\sum_{i}\nu_{ij}}
\end{align*}

\end_inset

in
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:equilibrium-constant-1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 ChemGen inspects 
\begin_inset Formula $\sum_{i}\nu_{ij}$
\end_inset

 and finds the specific power,
 if it is an positive integer 
\begin_inset Formula $\left(\frac{P_{\mathrm{ref}}}{R^{0}T}\right)$
\end_inset

 is expressed as a series of multiplications,
 ie.
 
\begin_inset Formula $\sum_{i}\nu_{ij}=3$
\end_inset

 gives 
\begin_inset Formula $\left(\frac{p_{\mathrm{ref}}}{R^{0}T}\right)\cdot\left(\frac{p_{\mathrm{ref}}}{R^{0}T}\right)\cdot\left(\frac{p_{pref}}{R^{0}T}\right)$
\end_inset

 with 
\begin_inset Formula $1/R^{0}T$
\end_inset

 precomputed,
 if it is negative integer,
 
\begin_inset Formula $1/p_{ref}$
\end_inset

 is precomputed and a series of multiplication are carried in a similar manner.
 This removes the need to use the power function.
 Without code generation these types of expressions are bound to utilizing power functions or possibly if-statements that default to multiplication after inspecting the value of 
\begin_inset Formula $\sum_{i}\nu_{ij}$
\end_inset

.
\end_layout

\begin_layout Standard
There exist various models for approximating the forward rate functions,
 
\begin_inset Formula $k_{j}^{f}$
\end_inset

,
 in Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:chemical-reaction-rate-of-progress"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 all of the supported functions of which ChemGen supports will be discussed next.
\end_layout

\begin_layout Subsubsection
Arrhenius reactions
\end_layout

\begin_layout Standard
The Arrhenius form is the most common model for approximating reaction rates.
 The forward rate constants are computed as
\begin_inset Formula 
\[
k_{j}^{f}=k_{A,j}^{f}(T)=A_{j}T^{b_{j}}\exp\left(-\frac{E_{j}}{R^{0}T}\right),
\]

\end_inset

 where 
\begin_inset Formula $A_{j}>0$
\end_inset

 and 
\begin_inset Formula $b_{j}$
\end_inset

 are parameters and 
\begin_inset Formula $E_{j}\geq0$
\end_inset

 is the activation energy
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Gio99,Kee96"
literal "false"

\end_inset

.
 In ChemGen an optimization is made to again avoid the power function.
 Generally,
 
\begin_inset Formula $b_{j}$
\end_inset

 is not an integer,
 however,
 since the 
\begin_inset Formula $\exp$
\end_inset

 function is unavoidable,
 we can utilize the precomputed 
\begin_inset Formula $\ln T$
\end_inset

 in 
\begin_inset Formula $y_{c}$
\end_inset

 and insert an additional term in the exponent
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
k_{A,j}^{f}(T,\ln T)=A_{j}\exp\left(\beta_{j}\ln T-\frac{E_{j}}{R^{0}T}\right).
\]

\end_inset


\end_layout

\begin_layout Subsubsection
Three-body reactions
\end_layout

\begin_layout Standard
These reactions require a 
\begin_inset Quotes eld
\end_inset

third body
\begin_inset Quotes erd
\end_inset

 in order to proceed.
 Dissociation and recombination reactions are often of this type.
 The rate of progress is scaled by a prefactor as
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Kee96"
literal "false"

\end_inset


\begin_inset Formula 
\begin{equation}
q_{j}=\left(\sum_{i=1}^{n_{s}}\alpha_{ij}C_{i}\right)\left(k_{j}^{f}\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{f}}-k_{j}^{r}\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{r}}\right),\label{eq:third_body}
\end{equation}

\end_inset

where 
\begin_inset Formula $\alpha_{ij}$
\end_inset

 are the third-body efficiencies.
 In ChemGen,
 the rate of progress is kept the same for a down stream calculation,
 so 
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:chemical-reaction-rate-of-progress"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

,
 can still be utilized the prefactor is incorporated with the Arrenhius expression
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
k_{j}^{f}=k_{TB,j}^{f}(C,M_{c},T,\ln T)=\left(\sum_{i=1}^{n_{s}}\alpha_{ij}C_{i}\right)k_{A,j}^{f}(T,\ln T)=\left(M_{c}+\sum_{i=1}^{n_{s}}\left(\alpha_{ij}-1\right)C_{i}\right)k_{A,j}^{f}(T,\ln T)
\]

\end_inset

which will still be attributed to the second term in 
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:third_body"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 via the relationship of 
\begin_inset Formula $k_{j}^{f}$
\end_inset

 to 
\begin_inset Formula $k_{j}^{r}$
\end_inset

 from 
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:reverse_rate"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 An additional optimization can be made in the code generation process for the 
\begin_inset Formula $\alpha_{ij}$
\end_inset

 terms.
 The efficiencies always default to one,
 
\begin_inset Formula $\alpha_{ij}=1$
\end_inset

,
 so for any species without a specific efficiency the 
\begin_inset Formula $\left(\alpha_{ij}-1\right)C_{i}$
\end_inset

 term can be removed,
 avoiding extra work to determine the efficiency from a sum of products of all species to a sum of products of all species with 
\begin_inset Formula $\alpha_{ij}\ne1$
\end_inset

.
 
\end_layout

\begin_layout Subsubsection
Fall-off reactions
\begin_inset CommandInset label
LatexCommand label
name "subsec:fall-off-reactions"

\end_inset


\end_layout

\begin_layout Standard
Unimolecular/recombination fall-off reactions incorporate a dependence on pressure.
 In general,
 this model predicts an increase in the reaction rate with increasing pressure.
 Given Arrhenius-type low-pressure and high-pressure limits for the rate functions (
\begin_inset Formula $k_{A,0,j}$
\end_inset

 and 
\begin_inset Formula $k_{A,\infty,j}$
\end_inset

,
 respectively with their own 
\begin_inset Formula $A_{j}$
\end_inset

,
 
\begin_inset Formula $b_{j}$
\end_inset

,
 and 
\begin_inset Formula $E_{j}$
\end_inset

 constant),
 
\begin_inset Formula $k_{j}^{f}$
\end_inset

 is computed as
\begin_inset Formula 
\begin{equation}
k_{j}^{f}=k_{FO,j}^{f}(C,M_{c},T,\ln T)=k_{A,\infty,j}(T,\ln T)\left(\frac{P_{r}(C,M_{c},T,\ln T)}{1+P_{r}(C,M_{c},T,\ln T)}\right)F,\label{eq:falloff-reaction}
\end{equation}

\end_inset

where 
\begin_inset Formula $P_{r}$
\end_inset

 is the reduced pressure,
 defined as
\begin_inset Formula 
\[
P_{r}(C,M_{c},T,\ln T)=\frac{k_{A,0,j}(T,\ln T)}{k_{A,\infty,j}(T,\ln T)}\left(M_{c}+\sum_{i=1}^{n_{s}}\left(\alpha_{ij}-1\right)C_{i}\right).
\]

\end_inset

Where the same optimization for efficiencies can be made There is a family different fall off functions which all revolve in a different way to approximate 
\begin_inset Formula $F$
\end_inset

,
 known as the broadening term,
 which we outline in the following,
 with the simplest being 
\begin_inset Formula $F=1$
\end_inset

 from Lindemann
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citet
key "Lin22"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
Troe Broadening
\end_layout

\begin_layout Standard
For the Troe fall-off reaction the broadening term,
 
\begin_inset Formula $F$
\end_inset

,
 in Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:falloff-reaction"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is computed using the following 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\log_{10}F(T,P_{r}) & = & \frac{\log_{10}F_{cent}(T)}{1+f_{1}(P_{r})^{2}}\label{eq:f_and_fcent}\\
F_{cent}(T) & = & (1-\alpha_{j})\exp(-T/T_{j,3})+\alpha\exp(-T/T_{j,1})+\exp(-T_{j,2}/T)\nonumber \\
f_{1} & = & (\log_{10}P_{r}+c)/(n-0.14(\log_{10}P_{r}+c))\nonumber \\
c & = & -0.4-0.67\;\log_{10}F_{cent}\nonumber \\
n & = & 0.75-1.27\;\log_{10}F_{cent}\nonumber 
\end{eqnarray}

\end_inset

The origin of the of are given in
\begin_inset space ~
\end_inset


\begin_inset CommandInset citation
LatexCommand citep
key "Tro77,Tro79,Gil83,Tro87"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection*
SRI Broadening
\end_layout

\begin_layout Standard
In the SRI 
\begin_inset CommandInset citation
LatexCommand citet
key "Ste89"
literal "false"

\end_inset

 broadening approach 
\begin_inset Formula $F$
\end_inset

 is replaced entirely by
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
F(T,P_{r})=d\bigl[a\exp(-b/T)+\exp(-T/c)\bigr]^{1/(1+\log_{10}^{2}P_{r})}T^{e},
\]

\end_inset

where coefficients 
\begin_inset Formula $a$
\end_inset

 through 
\begin_inset Formula $e$
\end_inset

 are specified for each reaction.
\end_layout

\begin_layout Subsubsection
Pressure-Dependent Arrhenius Rate Expressions 
\end_layout

\begin_layout Standard
The previous fall-off reaction rates seek to fit between two reaction rates between a low and a high pressure.
 However,
 some rates have several pressure dependent zones which cannot be accurately represented by a single or two Arrhenius expressions.The pressure-dependent Arrhenius rate expressions was introduced to utilize pressure-dependent reaction rates by logarithmically interpolating between Arrhenius rate expressions at various pressures 
\begin_inset CommandInset citation
LatexCommand citet
key "Gou11_b"
literal "false"

\end_inset

.
 In short it is known as the P-log reaction rate.
 Given two rate known Arrhenius reaction rates at two specific pressures,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
p_{i}:k_{i}(T) & = & A_{i}T^{b_{i}}\exp\left(-E_{i}/RT\right)\text{ and }\label{eq:plog_p1_p2}\\
p_{i+1}:k_{i+1}(T) & = & A_{i+1}T^{b_{i+1}}\exp\left(-E_{i+1}/RT\right),\nonumber 
\end{eqnarray}

\end_inset

the rate at an intermediate pressure is computed as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\ln k_{plog}(T,p)=\ln k_{i}(T)+\bigl(\ln k_{i+1}(T)-\ln k_{i}(T)\bigr)\frac{\ln p-\ln p_{i}}{\ln p_{i+1}-\ln p_{i}}.\label{eq:plog_rate}
\end{equation}

\end_inset

An additional complexity is that multiple rate expressions may be given at the same pressure,
 in which case the rate used in the interpolation formula is the sum of all the rates given at that pressure.
 For pressures outside the given range,
 the rate expression at the nearest bounded pressure is used.
 In ChemGen the 
\begin_inset Formula $\log p_{i}$
\end_inset

 are calculated during code generation.
 This along with the addition of a 
\begin_inset Formula $\log k$
\end_inset

 Arrhenius expression,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\ln k(T,\ln T)=\ln A+b\ln T+-E/RT,\label{eq:logK}
\end{equation}

\end_inset

with precomputed 
\begin_inset Formula $\ln A$
\end_inset

 avoids overuse of the 
\begin_inset Formula $\ln$
\end_inset

 function.
 
\end_layout

\begin_layout Standard
To further optimize this rate,
 consider for example,
 the 81st reaction in FFCM2 
\begin_inset CommandInset citation
LatexCommand citet
key "Zha23"
literal "false"

\end_inset

,
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

- equation:
 CH2(S) + H2O <=> CH2O + H2  # Reaction 81
\end_layout

\begin_layout Plain Layout

  type:
 pressure-dependent-Arrhenius
\end_layout

\begin_layout Plain Layout

  rate-constants:
\end_layout

\begin_layout Plain Layout

  - {P:
 0.1 atm,
 A:
 3.36e+22,
 b:
 -3.33,
 Ea:
 3950.0}
\end_layout

\begin_layout Plain Layout

  - {P:
 1.0 atm,
 A:
 4.8e+23,
 b:
 -3.63,
 Ea:
 5220.0}
\end_layout

\begin_layout Plain Layout

  - {P:
 3.0 atm,
 A:
 6.85e+23,
 b:
 -3.66,
 Ea:
 5820.0}
\end_layout

\begin_layout Plain Layout

  - {P:
 10.0 atm,
 A:
 1.53e+24,
 b:
 -3.73,
 Ea:
 6820.0}
\end_layout

\begin_layout Plain Layout

  - {P:
 30.0 atm,
 A:
 8.75e+23,
 b:
 -3.62,
 Ea:
 7655.0}
\end_layout

\begin_layout Plain Layout

  - {P:
 100.0 atm,
 A:
 1.27e+22,
 b:
 -3.06,
 Ea:
 7950.0},
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

which requires seven boolean conditionals be checked,
 
\begin_inset Formula $p\leq0.1$
\end_inset

,
 
\begin_inset Formula $0.1<p\leq1.0$
\end_inset

,
 
\begin_inset Formula $1.0<p\leq3.0$
\end_inset

,
 
\begin_inset Formula $3.0<p\leq10.0$
\end_inset

,
 
\begin_inset Formula $10.0<p\leq30.0$
\end_inset

,
 
\begin_inset Formula $30.0<p\leq100.0$
\end_inset

,
 
\begin_inset Formula $p>100.0$
\end_inset

 where 
\begin_inset Formula $p$
\end_inset

 is in atm.
 We explored an optimization in ChemGen where 
\begin_inset Formula $\ln p$
\end_inset

 is pre-calculated before traversing over the booleans,
 where its value is checked against the pre-calculated 
\begin_inset Formula $\ln p_{i}$
\end_inset

 values.
 This can be coordinated with the pre-calculated 
\begin_inset Formula $\ln T$
\end_inset

,
 and generated 
\begin_inset Formula $\ln A_{i}$
\end_inset

 and 
\begin_inset Formula $\ln A_{i+1}$
\end_inset

 with 
\begin_inset Formula $\ln k\left(T,\ln T\right)$
\end_inset

,
 to avoid overuse of 
\begin_inset Formula $\ln$
\end_inset

.
 We found that,
 since these reaction rates are rare,
 that fully optimizing these boolean checks and 
\begin_inset Formula $\ln$
\end_inset

 calls wasn't required,
 and thus only utilize the generated 
\begin_inset Formula $\ln p_{i}$
\end_inset

 as removing 2 
\begin_inset Formula $\ln$
\end_inset

 calls,
 the eventual 
\begin_inset Formula $\ln p_{i}$
\end_inset

 and 
\begin_inset Formula $\ln p_{i+1}$
\end_inset

 was still useful and optimal for differentiation.
 The use of Equation 
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:logK"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is still possible for future iterations.
 Beyond this,
 another optimization could be using a fit to determine the approximate bin in which 
\begin_inset Formula $p$
\end_inset

 falls along with a bisection search,approximate 
\begin_inset Formula $p\rightarrow i$
\end_inset

,
 thus optimizing convergence,
 which could potentially avoid warp divergence where different degrees of freedom may check a different number of booleans to be nearly one to two evaluated conditionals.
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Subsubsection*
Tsang Broadening
\end_layout

\begin_layout Plain Layout
In the Tsang
\begin_inset CommandInset citation
LatexCommand citet
key "Tsa91"
literal "false"

\end_inset

 broadening approach 
\begin_inset Formula $F_{cent}$
\end_inset

 in Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:f_and_fcent"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is simply
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
F_{cent}=A+BT
\]

\end_inset

with the remaining features,
 
\begin_inset Formula $f_{1}$
\end_inset

,
 
\begin_inset Formula $c$
\end_inset

,
 and 
\begin_inset Formula $n$
\end_inset

,
 computed in the same way the Troe formulation.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Section
Calculation of the Source Term
\begin_inset CommandInset label
LatexCommand label
name "subsec:sourceterm"

\end_inset


\end_layout

\begin_layout Plain Layout
There are several ways the reactions rates can be accrued to create the actual source term applied to the species conservation equations.
 The most simple approach would be to use the chemical state at every degree of freedom to calculate the forward reactions,
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
k_{p}=\left(k_{1}^{f}\left(y_{c,p}\right),k_{2}^{f}\left(y_{c,p}\right),k_{3}^{f}\left(y_{c,p}\right),\dots,k_{n_{r}}^{f}\left(y_{c,p}\right)\right)\label{eq:forward_rates_vector}
\end{equation}

\end_inset

Here we represent the entirity of forward reactions as 
\begin_inset Formula $k_{p}$
\end_inset

 where the subscript 
\begin_inset Formula $p$
\end_inset

represents a particularly degree of freedom.
 At every degree of freedom there is a unique chemical state,
 
\begin_inset Formula $y_{c,p}$
\end_inset

 that yields 
\begin_inset Formula $n_{r}\times n_{dof}$
\end_inset

 forward reactions.
 Once the forward reactions are calculated the rates of progress can then be computed and assembled as
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
q_{p}=\left(q_{1,p},q_{2,p},q_{3,p},\dots,q_{n_{r},p}\right),\label{eq:progress_rates_vector}
\end{equation}

\end_inset

where 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
q_{j,p}=k_{j}^{f}\left(y_{c,p}\right)\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{f}}-\frac{k_{j}^{f}\left(y_{c,p}\right)}{K_{j}^{e}}\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{r}}.\label{eq:progress_rates_element}
\end{equation}

\end_inset

This again 
\begin_inset Formula $n_{r}\times n_{dof}$
\end_inset

 rates of progress.
 The formulation in Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand ref
reference "eq:progress_rates_element"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is reduced in Chemgen by removing any zero-power terms and substituting multiplication operations for any whole number power in the terms
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{f}}\text{ and }\prod_{i=1}^{n_{s}}C_{i}^{\nu_{ij}^{r}}.
\]

\end_inset

For instance,
 the reaction 
\begin_inset Formula $k_{1}$
\end_inset

 describing the global reaction of hydrogen and oxygen becoming water,
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
2H_{2}+O_{2}\rightleftharpoons2H_{2}O,
\]

\end_inset

where 
\begin_inset Formula $\left(C_{0},C_{1},C_{2}\right)=\left(C_{H_{2}},C_{O_{2}},C_{H_{2}O}\right)$
\end_inset

,
 reduces to 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
q_{1,p}=k_{1}^{f}\left(y_{c,p}\right)C_{0}^{2}C_{1}-\frac{k_{1}^{f}\left(y_{c,p}\right)}{K_{1}^{e}}C_{2}^{2}=k_{1}^{f}\left(y_{c,p}\right)C_{0}C_{o}C_{1}-\frac{k_{1}^{f}\left(y_{c,p}\right)}{K_{1}^{e}}C_{2}C_{2}\label{eq:progress_rates_reduced}
\end{equation}

\end_inset

Finally,
 the rates of progress can then be assembled into the final net production rate 
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
\omega_{p}=\left(\omega_{1,p},\omega_{2,p},\omega_{3,p},\dots,\omega_{n_{s},p}\right),
\]

\end_inset

where
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\[
\omega_{i}=\sum_{j=1}^{n_{r}}\nu_{ij}q_{j}.
\]

\end_inset

This results in 
\begin_inset Formula $n_{n_{s}}\times n_{dof}$
\end_inset

 source terms.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Extension to Navier-Stokes
\begin_inset CommandInset label
LatexCommand label
name "subsec:Diffusive_flows"

\end_inset


\end_layout

\begin_layout Standard
An immediate way to extend the above formulation to include diffusion and thus approximate the chemically reacting Navier-Stokes equation is to use constant Schmidt and Lewis number approximations.
 The Navier-Stokes equations are of the form
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial y_{f}}{\partial t}+\nabla\cdot F\left(y_{f},\nabla y_{f}\right)-\mathcal{S}\left(y_{f}\right)=0\label{eq:conservation-law-strong-form-1}
\end{equation}

\end_inset

Which has the addition of the viscous flux,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
F\left(y,\nabla y\right)=\left(\mathcal{F}^{}\left(y\right)-\mathcal{F}^{v}\left(y,\nabla y\right)\right)\label{eq:flux_function}
\end{equation}

\end_inset

Where 
\begin_inset Formula $\mathcal{F}^{}\left(y\right)$
\end_inset

 is consistent with the flux function from Equation 
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:reacting-navier-stokes-spatial-convective-flux-component"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 and the viscous flux is 
\begin_inset Formula 
\begin{equation}
\mathcal{F}_{k}^{v}\left(y,\nabla y\right)=\left(\tau_{1k},\ldots,\tau_{dk},\sum_{j=1}^{d}\tau_{kj}v_{j}-W_{i}C_{i}h_{i}V_{ik}-q_{k},C_{1}V_{1k},\ldots,C_{n_{s}}V_{n_{s}k}\right),\label{eq:navier-stokes-viscous-flux-spatial-component}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
where 
\begin_inset Formula $q:\mathbb{R}^{m}\times\mathbb{R}^{m\times d}\rightarrow\mathbb{R}^{d}$
\end_inset

 is the thermal heat flux,
 
\begin_inset Formula $\tau:\mathbb{R}^{m}\times\mathbb{R}^{m\times d}\rightarrow\mathbb{R}^{d\times d}$
\end_inset

 is the viscous stress tensor,
 
\begin_inset Formula $\left(h_{1},\ldots,h_{n_{s}}\right):\mathbb{R}^{m}\rightarrow\mathbb{R}^{n_{s}}$
\end_inset

 are the species specific enthalpies,
 and 
\begin_inset Formula $\left(\left(V_{11},\dots,V_{1d}\right),\dots,\left(V_{n_{s}1},\dots,V_{n_{s}d}\right)\right):\mathbb{R}^{m}\times\mathbb{R}^{n_{s}\times d}\rightarrow\mathbb{R}^{n_{s}\times d}$
\end_inset

 are the species diffusion velocities.
 The 
\begin_inset Formula $k$
\end_inset

-th spatial component of the viscous stress tensor is given by
\end_layout

\begin_layout Standard
\noindent
\begin_inset Formula 
\begin{equation}
\tau_{k}\left(y,\nabla y\right)=\mu\left(\frac{\partial v_{1}}{\partial x_{k}}+\frac{\partial v_{k}}{\partial x_{1}}-\delta_{k1}\frac{2}{3}\sum_{j=1}^{d}\frac{\partial v_{j}}{\partial x_{j}},\ldots,\frac{\partial v_{d}}{\partial x_{k}}+\frac{\partial v_{k}}{\partial x_{d}}-\delta_{kd}\frac{2}{3}\sum_{j=1}^{d}\frac{\partial v_{j}}{\partial x_{j}}\right),\label{eq:reacting-navier-stokes-viscous-stress-tensor-component}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\noindent
where 
\begin_inset Formula $\mu:\mathbb{R}^{m}\rightarrow\mathbb{R}$
\end_inset

 is the dynamic viscosity.
 The 
\begin_inset Formula $k$
\end_inset

-th spatial component of the heat flux is given as
\begin_inset Formula 
\begin{eqnarray*}
q_{k}\left(y,\nabla y\right) & = & -\lambda\frac{\partial T}{\partial x_{k}}.
\end{eqnarray*}

\end_inset

where 
\begin_inset Formula $\lambda:\mathbb{R}^{m}\rightarrow\mathbb{R}$
\end_inset

 is the thermal conductivity.
\end_layout

\begin_layout Standard
Up to this point,
 the formulation presented is consistent with the a single component Navier-Stokes formulation.
 In a detailed transport approach,
 
\begin_inset Formula $\mu$
\end_inset

 and 
\begin_inset Formula $\lambda$
\end_inset

 would be functions of both temperature and species concentration.
 To remove this,
 specialized models can be created for an average or temperature varying viscosity 
\begin_inset Formula $\mu$
\end_inset

 by using a Prandtl number approximation,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Pr=\frac{c_{p}\mu}{\lambda}.\label{eq:Pr_number}
\end{equation}

\end_inset

Remaining is the species diffusion velocity,
 which can be estimated from either a species specific Schmidt number,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Sc_{i}=\frac{\mu}{\rho\bar{D}_{i}}.\label{eq:Sc_number}
\end{equation}

\end_inset

or,
 in some cases,
 a species specific Lewis number,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Le_{i}=\frac{\lambda}{\rho c_{p}\bar{D}_{i}}.\label{eq:Sc_number-1}
\end{equation}

\end_inset

The species mixture averaged diffusion coefficient,
 
\begin_inset Formula $\bar{D}_{i}$
\end_inset

,
 is used in 
\begin_inset Formula $k$
\end_inset

-th spatial component of the diffusion velocity for the 
\begin_inset Formula $i$
\end_inset

-th species is given as
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
V_{ik}=\frac{\bar{D}_{i}}{C_{i}}\frac{\partial C_{i}}{\partial x_{k}}-\frac{\bar{D}_{i}}{\rho}\frac{\partial\rho}{\partial x_{k}}.\label{eq:diffusion_velocity}
\end{equation}

\end_inset

These transport quantities complete the necessary components to extend the single-component Navier-Stokes to a multi-component formulation.
 An even more reduced case would be to assume a singular value for the species dependent quantities,
 
\begin_inset Formula $Le_{i}=Le$
\end_inset

 and 
\begin_inset Formula $Sc_{i}=Sc$
\end_inset

.
 For the species dependent detailed mixture averaged quantities see 
\begin_inset CommandInset citation
LatexCommand citet
key "Joh20"
literal "false"

\end_inset

 which is based on 
\begin_inset CommandInset citation
LatexCommand citet
key "Kee05"
literal "false"

\end_inset

.
 In addition,
 Reynolds Averaged Navier Stokes and subgrid scale modeling have effective transport quantities where these nondimensionalized numbers can be modified in accordance
\begin_inset CommandInset citation
LatexCommand citet
key "Coo98,Hei06"
literal "false"

\end_inset

.
 Therefore,
 under these assumptions,
 along with the thermodynamics and chemical source terms provided by ChemGen,
 it is possible to approximate the solution of the chemically reacting Navier–Stokes equations starting from a single component formulation.
\end_layout

\begin_layout Section
Time Integration Strategies
\end_layout

\begin_layout Standard
The stability of the CFD time integration may be compromised by explicitly applying the source term of Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "enu:source"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 Different approaches can be utilized by time-splitting the evolution of the chemical state and retain the stability of the fluid dynamic algorithms.
 These approaches typically do not involve the flux from either convection or diffusion.
 By removing any spatial fluxes,
 the conservation Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:conservation-law-strong-form"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 reduces to an ordinary differential equation,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial y_{f}}{\partial t}+\nabla\cdot\mathcal{F}\left(y_{f}\right)-\mathcal{S}\left(y_{f}\right)=0\rightarrow\frac{dy_{f}}{dt}=\mathcal{S}\left(y_{f}\right).\label{eq:conservation-law-to-ode}
\end{equation}

\end_inset

By removing the spatial fluxes,
 the fluid dynamic state is reduced to
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y_{f}=\left(\rho v_{1},\ldots,\rho v_{d},\rho e_{t},C_{1},\ldots,C_{n_{s}}\right)^{T}\rightarrow y_{f}=\left(0,\ldots,0,\rho u,C_{1},\ldots,C_{n_{s}}\right)^{T}\label{eq:ODE_state}
\end{equation}

\end_inset

and by inspecting the source term,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{S}\left(y_{f}\right)=\left(0,\ldots,0,0,\omega_{1},\ldots,\omega_{n_{s}}\right)^{T},\label{eq:RNS_source}
\end{equation}

\end_inset

the state can be reduced to be purely concentration based for time-split algorithms:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{ccc}
\frac{dy}{dt}=S\left(y\right); & y=\left(C_{1},\ldots,C_{n_{s}}\right)^{T}; & S\left(y\right)=\left(\omega_{1},\ldots,\omega_{n_{s}}\right)^{T}.\end{array}\label{eq:extracted_problem}
\end{equation}

\end_inset

In this section we will cover some tools provided by ChemGen to integrate this state in time.
 We also comment on how ChemGen provides tools for fully coupled methods.
 For the compressible time-split integration approaches provided by ChemGen the source term is calculated utilizing a global 
\begin_inset Formula $\rho u$
\end_inset

 and the derived chemical state,
 
\begin_inset Formula $y_{c}$
\end_inset

,
 was used to produce 
\begin_inset Formula $S\left(y\right)$
\end_inset

.
 
\end_layout

\begin_layout Subsection
Constant Pressure Strategy
\end_layout

\begin_layout Standard
In CFD,
 it is typically assumed that the volume of a cell remains constant over time.
 This assumption influences the allowable time integration strategies and,
 in compressible flows,
 permits pressure to rise in response to changes in species.
 However,
 in incompressible or low-Mach solvers,
 pressure is treated differently:
 it is assumed to adjust instantaneously,
 effectively decoupling it from the time evolution and thus remain constant at some thermodynamic value.
 This means pressure is held constant in time,
 which imposes a constraint on the energy conservation.
 Specifically,
 if pressure does not evolve,
 then the enthalpy,
 
\begin_inset Formula $\rho h=\sum_{i=1}^{n_{s}}W_{i}C_{i}h_{i}$
\end_inset

 ,
 must also remain constant in time.
 This constraint becomes clear when examining the thermodynamic relationship between internal energy,
 enthalpy,
 and pressure,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\rho u=\sum_{i=1}^{n_{s}}W_{i}C_{i}u_{i}=\sum_{i=1}^{n_{s}}W_{i}C_{i}h_{i}-R^{o}T\sum_{i=1}^{n_{s}}C_{i}=\sum_{i=1}^{n_{s}}W_{i}C_{i}h_{i}-p=\rho h-p,\label{eq:int_energy_enthalpy}
\end{equation}

\end_inset

and applying a time derivative
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial\rho u}{\partial t}=\frac{\partial\rho h}{\partial t}-\cancelto{0}{\frac{\partial p}{\partial t}}=0\rightarrow\frac{\partial\rho h}{\partial t}=0.\label{eq:int_energy_enthalpy-1}
\end{equation}

\end_inset

Therefore,
 the constant pressure assumption can be enforced by treating enthalpy as a globally constant,
 while leaving the rest of the system formulation unchanged.
\end_layout

\begin_layout Subsection
Explicit Runge-Kutta Time Integration Method
\end_layout

\begin_layout Standard
ChemGen provides a Runge-Kutta 4th-order method (RK4) for integrating the chemical state from 
\begin_inset Formula $y^{n}$
\end_inset

 to 
\begin_inset Formula $y^{n+1}$
\end_inset

 over an time interval of 
\begin_inset Formula $\Delta t$
\end_inset

 from Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:extracted_problem"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 This explicit time integration scheme approximates the solution by evaluating the source term at four intermediate stages within each time step
\begin_inset CommandInset citation
LatexCommand citet
key "Hai96"
literal "false"

\end_inset

.
 Given a current state 
\begin_inset Formula $y_{n}$
\end_inset

 at time 
\begin_inset Formula $t_{n}$
\end_inset

,
 the RK4 update to the next state 
\begin_inset Formula $y^{n+1}$
\end_inset

 at time 
\begin_inset Formula $t^{n+1}$
\end_inset

.
 The algorithm is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{ccc}
k_{1} & = & S\left(y^{n}\right)\\
k_{2} & = & S\left(y^{n}+\frac{\Delta t}{2}k_{1}\right)\\
k_{3} & = & S\left(y^{n}+\frac{\Delta t}{2}k_{2}\right)\\
k_{4} & = & S\left(y^{n}+\Delta tk_{3}\right)\\
y^{n+1} & = & y^{n}+\frac{\Delta t}{6}\left(k_{1}+2k_{2}+2k_{3}+k_{4}\right)
\end{array}\label{eq:RK4}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
This method achieves fourth-order accuracy in time,
 meaning the local truncation error scales as 
\begin_inset Formula $\mathcal{O}(\Delta t^{5})$
\end_inset

 and the global error as 
\begin_inset Formula $\mathcal{O}(\Delta t^{4})$
\end_inset

.
 RK4 is particularly effective for non-stiff problems where high accuracy is desired without the overhead of the implicit solvers which deal with possible expensive linear as detailed below.
\end_layout

\begin_layout Subsection
Implicit Time Integration
\end_layout

\begin_layout Standard
Although explicit methods like RK4 offer high accuracy,
 they can suffer from stability issues,
 particularly for stiff problems.
 In contrast,
 implicit time integration methods provide improved stability at the cost of increased computational overhead.
 Consider first the backwards Euler implicit time integration methods which seeks to find a 
\begin_inset Formula $y^{n+1}$
\end_inset

 that satisfies given an initial state 
\begin_inset Formula $y^{n}$
\end_inset

 ,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{y^{n+1}-y^{n}}{\Delta t}=S\left(y^{n+1}\right)\label{eq:Backward_euler}
\end{equation}

\end_inset

The Newton's method can be used to iteratively find 
\begin_inset Formula $y^{n+1}$
\end_inset

 by rewriting 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{-y^{n}}{\Delta t}+\frac{y^{n+1}}{\Delta t}-S\left(y^{n+1}\right)=f(y^{n+1})=0\label{eq:BE-rewrite}
\end{equation}

\end_inset

and solving the decrement
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\delta y^{n+1}=\left(y_{k+1}^{n+1}-y_{k}^{n+1}\right)=-\mathcal{J}\left(y_{k}^{n+1}\right)^{-1}f(y_{k}^{n+1})\label{eq:newtons-method}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y_{k}^{n+1}\right)\left(y_{k+1}^{n+1}-y_{k}^{n+1}\right)=-f(y_{k}^{n+1})\label{eq:newtons-method-2}
\end{equation}

\end_inset

Where 
\begin_inset Formula $\mathcal{J}\left(y_{k}^{n+1}\right)$
\end_inset

 is the Jacobian of 
\begin_inset Formula $f(y_{k}^{n+1})$
\end_inset

 which for this backwards Euler method is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y_{k}^{n+1}\right)_{ij}=\delta_{ij}\Delta t-\frac{\partial\omega_{i}\left(y_{k}^{n+1}\right)}{\partial C_{j}}\text{; }\delta_{ij}=\begin{cases}
1 & i=j\\
0 & i\ne j
\end{cases}\label{eq:jacobian}
\end{equation}

\end_inset

Which requires the partial derivative of the production term with respect to each individual species.
 Regardless of the discretization scheme,
 the derivatives of the production rates will be needed.
 ChemGen was designed to include full differentiation throughout;
 each function contains a derivative and possible chain rule with examples detailed in Section
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "sec:Code-Generation"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

.
 
\end_layout

\begin_layout Standard
It is important to note that Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:jacobian"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 is for the special case of time-split chemistry for a constant internal energy which acts as a global variable and is not part of the state.
 If a fully implicit scheme or a scheme with a source term applied to a derived energy equation (such as enthalpy) is formulated,
 the derivatives for the source term with respect to temperature will be necessary.
 For instance,
 in using a fully implicit time integration scheme for fluid dynamics state 
\begin_inset Formula $y_{f}$
\end_inset

,
 
\begin_inset Formula $\rho u$
\end_inset

 can not be eliminated from the state and thus 
\begin_inset Formula $\frac{\partial\omega_{i}}{\partial\rho u}$
\end_inset

 will be required but easily obtained via chain rule
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\partial\omega_{i}}{\partial\rho u}=\frac{\partial\omega_{i}}{\partial T}\left(\frac{\partial\rho u}{\partial T}\right)^{-1}+\sum_{j=1}^{n_{s}}\frac{\partial\omega_{i}}{\partial C_{j}}\left(\frac{\partial\rho u}{\partial C_{j}}\right)^{-1}\label{eq:chain_int_energy}
\end{equation}

\end_inset

Chemgen provides the necessary derivatives for Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:jacobian"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 in a singular matrix as well as a larger matrix that can be generated to utilize the chain rule from Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:chain_int_energy"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}_{a}\left(C_{i},T\right)_{ij}=\frac{\partial\omega_{i}}{\partial C_{j}}\text{ and }\mathcal{J}_{b}\left(C_{i},T\right)_{ij}=\begin{cases}
\frac{\partial\omega_{i}}{\partial T} & i=1\dots n_{s};j=1\\
\frac{\partial\omega_{i}}{\partial C_{j-1}} & i=1\dots n_{s};j=2\dots n_{s}+1;
\end{cases}\label{eq:derivative_matrices}
\end{equation}

\end_inset

Thus 
\begin_inset Formula $\mathcal{J}_{a}$
\end_inset

 or 
\begin_inset Formula $\mathcal{J}_{b}$
\end_inset

 can be used to assemble the necessary Jacobian,
 
\begin_inset Formula $\mathcal{J}$
\end_inset

,
 provided other derivatives are available beyond the source terms.
\end_layout

\begin_layout Subsection
Additional time integrators
\end_layout

\begin_layout Standard
While backward Euler time integration is inherently stable,
 it may exhibit poor accuracy or convergence for certain chemical mechanisms and time step sizes.
 To address this,
 ChemGen offers additional implicit integration strategies,
 allowing users to select a method appropriate to their problem.
 The choice of time-split chemistry integrator is problem dependent.
 For example,
 in low Mach number solvers where acoustic time scales are removed,
 chemical integration may proceed on the order of microseconds.
 In contrast,
 fully compressible solvers may require time steps as small as nanoseconds or even less.
 In such cases,
 a lower-order but computationally faster time integrator,
 like the previously outline Backward Euler or YASS algorithm outlined below,
 may be more appropriate.
\end_layout

\begin_layout Subsubsection
SDIRK-2
\end_layout

\begin_layout Standard
The two stage Singly Diagonally Implicit Runge--Kutta (SDIRK-2) method belongs to a class of implicit Runge-Kutta schemes where staging is utilized like that of RK4 but implicit strategies are used at each stage
\begin_inset CommandInset citation
LatexCommand citet
key "Hai96,Fran97"
literal "false"

\end_inset

.
 These methods are both stable and have higher order of accuracy than backward Euler.
 However,
 the Jacobian inversion approaches increase inherent cost of the method.
 The staged SDIRK-2 method is as follows
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray}
\Gamma_{1} & = & S\left(y_{n}+\gamma\Delta t\Gamma_{1}\right)\label{eq:SDIRK2}\\
\Gamma_{2} & = & S\left(y_{n}+(1-\gamma)\Delta t\Gamma_{1}+\gamma\Delta t\Gamma_{2}\right)\nonumber \\
y_{n+1} & = & y_{n}+\Delta t\left[(1-\gamma)\Gamma_{1}+\gamma\Gamma_{2}\right]\nonumber 
\end{eqnarray}

\end_inset

For the first stage 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
f\left(\Gamma_{1}\right)=\Gamma_{1}-S\left(y_{n}+\gamma\Delta t\Gamma_{1}\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\delta\Gamma_{1}=\left(\Gamma_{1,k+1}-\Gamma_{1,k}\right)=-\mathcal{J}\left(\Gamma_{1,k}\right)^{-1}f(\Gamma_{1,k})\label{eq:newtons-method-sdirk2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(\Gamma_{1,k}\right)\delta\Gamma_{1}=-f(\Gamma_{1,k})\label{eq:newtons-method-sdirk2-1}
\end{equation}

\end_inset

Where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}_{ij}\left(\Gamma_{1,k}\right)=\delta_{ij}-\gamma\Delta t\frac{\partial\omega_{i}\left(y_{n}+\gamma\Delta t\Gamma_{1,k}\right)}{\partial C_{j}}\label{eq:newtons-method-sdirk2-1-1}
\end{equation}

\end_inset

Here 
\begin_inset Formula $\omega_{i}$
\end_inset

 is evaluated from the initial guess of 
\begin_inset Formula $\Gamma_{1,k=1}=\mathcal{S}\left(y_{n}\right)$
\end_inset

 with subsequent 
\begin_inset Formula $\Gamma_{1,k}$
\end_inset

 coming from the iterated for decrement,
 
\begin_inset Formula $\Gamma_{1,k+1}=\Gamma_{1,k}+\delta\Gamma_{1}$
\end_inset

.
 Once 
\begin_inset Formula $\Gamma_{1,k}$
\end_inset

 is realized by the decrement being less than a prescribed tolerance,
\begin_inset Formula $||\delta\Gamma_{1,k}||<\epsilon$
\end_inset

,
 the next stage can be solved for in a similar manner,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
f\left(\Gamma_{2}\right)=\Gamma_{2}-S\left(y_{n}+(1-\gamma)\Delta t\Gamma_{1}+\gamma\Delta t\Gamma_{2}\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\delta\Gamma_{2}=\left(\Gamma_{2,k+1}-\Gamma_{2,k}\right)=-\mathcal{J}\left(\Gamma_{2,k}\right)^{-1}f(\Gamma_{2,k})\label{eq:newtons-method-sdirk2-2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(\Gamma_{2,k}\right)\delta\Gamma_{2}=-f(\Gamma_{2,k})\label{eq:newtons-method-sdirk2-1-2}
\end{equation}

\end_inset

Where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}_{ij}\left(\Gamma_{2,k}\right)=\delta_{ij}-\gamma\Delta t\frac{\partial\omega_{i}\left(y_{n}+(1-\gamma)\Delta t\Gamma_{1}+\gamma\Delta t\Gamma_{2,k}\right)}{\partial C_{j}}\label{eq:newtons-method-sdirk2-1-1-1}
\end{equation}

\end_inset

Here 
\begin_inset Formula $\omega_{i}$
\end_inset

 is evaluated from the initial guess of 
\begin_inset Formula $\Gamma_{2,k=1}=\mathcal{S}\left(y_{n}\right)$
\end_inset

 with subsequent 
\begin_inset Formula $\Gamma_{2,k}$
\end_inset

 coming from the iterated for decrement,
 
\begin_inset Formula $\Gamma_{2,k+1}=\Gamma_{2,k}+\delta\Gamma_{2}$
\end_inset

.
 Once 
\begin_inset Formula $\Gamma_{2,k}$
\end_inset

 is realized the next stage can be solved for in a similar manner.
 Chemgen utilizes 
\begin_inset Formula $\gamma=1-\sqrt{2}/2$
\end_inset

 
\begin_inset CommandInset citation
LatexCommand citet
key "Zha14"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsubsection
SDIRK-4
\end_layout

\begin_layout Standard
The four stage Singly Diagonally Implicit Runge-Kutta (SDIRK-4) follows the same structure as SDIRK-2 with additional stages which requires a set of coefficients.
 We utilize the coefficients implemented by FATODE 
\begin_inset CommandInset citation
LatexCommand citet
key "Zha14"
literal "false"

\end_inset

 which have shown stability for stiff problems and achieve 4th order accuracy.
 The SDIRK-4 method is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
y_{n+1} & = & y_{n}+\Delta t\sum_{i=1}^{5}b_{i}\Gamma_{i}\\
\Gamma_{p} & = & S\left(y_{n}+\sum_{j=1}^{i}a_{pj}\Delta t\Gamma_{j}\right)
\end{eqnarray*}

\end_inset

with coefficients
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{ccc}
a_{ii}=0.2\bar{6} & a_{21}=0.5 & a_{31}=3.541539\times10^{-1}\\
a_{32}=-5.415395\times10^{-2} & a_{41}=8.515494\times10^{-2} & a_{42}=-6.484332\times10^{-2}\\
a_{43}=7.915325\times10^{-2} & a_{51}=2.100115 & a_{53}=2.399816\\
a_{54}=-2.998818 & b_{1}=2.100115 & b_{2}=-7.677800\times10^{-1}\\
b_{3}=2.399816 & b_{4}=-2.998818 & b_{5}=0.2\bar{6}
\end{array}
\end{equation}

\end_inset

The implicit strategy is similar to SDIRK-2 but written more generally here
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
f\left(\Gamma_{p}\right)=\Gamma_{p}-S\left(y_{n}+\sum_{j=1}^{p}a_{pj}\Delta t\Gamma_{j}\right)
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\delta\Gamma_{p}=\left(\Gamma_{p,k+1}-\Gamma_{p,k}\right)=-\mathcal{J}\left(\Gamma_{p,k}\right)^{-1}f(\Gamma_{p,k})\label{eq:newtons-method-sdirk2-2-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(\Gamma_{p,k}\right)\delta\Gamma_{p}=-f(\Gamma_{p,k})\label{eq:newtons-method-sdirk2-1-2-1}
\end{equation}

\end_inset

Where
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}_{ij}\left(\Gamma_{p,k}\right)=\delta_{ij}-a_{pp}\Delta t\frac{\partial\omega_{i}\left(y_{n}+\sum_{j=1}^{p}a_{pj}\Delta t\left(\Gamma_{j}\right)_{k}\right)}{\partial C_{j}}.\label{eq:newtons-method-sdirk2-1-1-1-1}
\end{equation}

\end_inset

Like SDIRK-2,
 the subsequent 
\begin_inset Formula $\Gamma_{p,k}$
\end_inset

 coming from the iterated for decrement,
 
\begin_inset Formula $\Gamma_{p,k+1}=\Gamma_{p,k}+\delta\Gamma_{p}$
\end_inset

.
 Once 
\begin_inset Formula $\Gamma_{p,k}$
\end_inset

 is realized by the decrement being less than a prescribed tolerance,
\begin_inset Formula $||\delta\Gamma_{p}||<\epsilon$
\end_inset

,
 the next stage can be solved for in a similar manner.
\end_layout

\begin_layout Subsubsection
2nd order Rosenbrock
\end_layout

\begin_layout Standard
Rosenbrock schemes are another attractive time integration strategy but removes the need of multiple Jacobian inversions that are required in a Newton solve per stage as shown in the prior SDIRK based methods.
 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{eqnarray*}
\left(\frac{1}{\Delta t\gamma_{11}}\mathcal{I}-J_{n}\right)\Gamma_{1} & = & S\left(y_{n}\right)\\
\left(\frac{1}{\Delta t\gamma_{22}}\mathcal{I}-J_{n}\right)\Gamma_{2} & = & S\left(y_{n}+\alpha\Gamma_{1}\right)+\frac{\beta}{\Delta t}\Gamma_{1}-S\left(y_{n}\right)\\
y_{n+1} & = & y_{n}+m_{1}\Gamma_{1}+m_{2}\Gamma_{2}
\end{eqnarray*}

\end_inset

Here 
\begin_inset Formula $J_{n}$
\end_inset

 is the Jacobian held constant for both stages,
 thus removing the need for multiple Jacobian evaluations,
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}_{n,ij}\left(\Gamma_{p,k}\right)=\frac{\partial\omega_{i}\left(y_{n}\right)}{\partial y_{n,j}}.\label{eq:newtons-method-sdirk2-1-1-1-1-1}
\end{equation}

\end_inset

Again we utilize the coefficients from FATODE
\begin_inset CommandInset citation
LatexCommand citet
key "Zha14"
literal "false"

\end_inset

 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\begin{array}{ccccc}
\gamma_{ii}=\gamma= & 1+\frac{\sqrt{2}}{2}\text{, }\alpha=1/\gamma\text{, } & \beta=\frac{-2}{\gamma} & m_{1}=\frac{3}{2\gamma} & m_{2}=\frac{1}{2\gamma}\end{array}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsubsection
YASS
\end_layout

\begin_layout Standard
Yet another stiff solver (YASS) is an appealing solver that only uses one linear solve to predict the species evolution.
 YASS is equivalent to one Newton step for backwards Euler that relies on sub-stepping if the change in 
\begin_inset Formula $y_{n}$
\end_inset

 is too large.
 The integration is
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\left(\mathcal{I}-\Delta t\mathcal{J}\right)\delta y_{n}=\Delta tS\left(y_{n}\right)
\end{equation}

\end_inset

where 
\begin_inset Formula $y_{n+1}=y_{n}+\delta y_{n}$
\end_inset

.
 If the norm of the decrement is larger than some scalar value,
 
\begin_inset Formula $||\delta y_{n}||>\alpha$
\end_inset

,
 then the YASS integration's time step is reduced to 
\begin_inset Formula $\Delta t_{s+1}=\frac{1}{2}\Delta t_{s}$
\end_inset

 where 
\begin_inset Formula $\Delta t_{s}=\Delta t$
\end_inset

 in the first integration.
 This means that there is am appealing chance that the solver is performing a minimum of one linear solve.
 This necessitates restricting the solver to fail if the time step reaches a minimum value,
 
\begin_inset Formula $\Delta t_{s+1}<\Delta t_{\text{min}}$
\end_inset

 ,
 to where a possible higher order method can be utilized.
 This is especially useful when stability is desired for time-split chemistry solves of very small times steps where the chemical state is not expected to evolve much,
 but the stiffness of the problem necessitates stability.
\end_layout

\begin_layout Subsubsection
Other Time Integration Schemes
\end_layout

\begin_layout Standard
Other time integration strategies not yet implemented in ChemGen can certainly be added using the same framework as the existing methods.
 These include,
 but are not limited to,
 multi-step implicit methods such as backward differentiation formulas ,
 which utilize information from previous time steps,
 and higher-order Rosenbrock methods 
\begin_inset CommandInset citation
LatexCommand citet
key "Zha14"
literal "false"

\end_inset

,
 which require multiple stages and carefully assigned coefficients.
 Some implicit methods,
 such as DGODE 
\begin_inset CommandInset citation
LatexCommand citet
key "Joh20"
literal "false"

\end_inset

 and CHEMEQ2 
\begin_inset CommandInset citation
LatexCommand citet
key "Mot01"
literal "false"

\end_inset

,
 may be more challenging to implement.
 DGODE is based on a finite element formulation and is tightly integrated with finite element numerics.
 In contrast,
 CHEMEQ2 requires the source term to be separated into distinct production and consumption components,
 introducing additional complexity that is not currently addressed by ChemGen.
\end_layout

\begin_layout Subsection
Linear Solvers
\end_layout

\begin_layout Standard
An inversion of a Jacobian matrix is required in all of the previously covered implicit methods,
 which generally take the form
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\delta\Gamma=-f(\Gamma)\rightarrow\delta\Gamma=-\mathcal{J}^{-1}f(\Gamma).\label{eq:matrix_example_1}
\end{equation}

\end_inset

This is the same as the familiar linear algebra expression
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
Ax=b\rightarrow x=A^{-1}b.\label{eq:matrix_example_1-1}
\end{equation}

\end_inset

It is well established that a direct inversion of the Jacobian,
 
\begin_inset Formula $\mathcal{J\rightarrow J}^{-1}$
\end_inset

,
 requires on the order 
\begin_inset Formula $\mathcal{O}\left(n^{3}\right)$
\end_inset

-operations for an 
\begin_inset Formula $n\times n$
\end_inset

 square matrix,
 which in the case of chemistry is 
\begin_inset Formula $\mathcal{O}\left(n_{s}^{3}\right)$
\end_inset


\begin_inset CommandInset citation
LatexCommand citet
key "Gol13"
literal "false"

\end_inset

.
 In CFD,
 such operations can be particularly challenging,
 as simulations often involve millions to billions of degrees of freedom,
 making each linear system solve computationally a core cost.
 Moreover,
 these inversions are not performed just once per time step.
 For example,
 backward Euler may require around five linear solves per time step to converge the Newton iteration.
 In comparison,
 SDIRK-2 and SDIRK-4 require a Newton solve per stage,
 which by the same example is roughly 10 and 25 linear solves per step,
 respectively.
 This makes Rosenbrock and YASS appealing time integration strategies,
 as they eliminate the need for a full Newton solve.
 Rosenbrock methods typically require two linear solves per step,
 while YASS,
 without adaptation,
 requires only one.
 Regardless,
 the minimization of the 
\begin_inset Formula $\mathcal{O}\left(n^{3}\right)$
\end_inset

 operations is a necessity to accelerate chemistry integration.
 
\end_layout

\begin_layout Standard
ChemGen supplies a standalone Generalized Minimal Residual (GMRES) method as its default linear solver
\begin_inset CommandInset citation
LatexCommand citet
key "Saa86"
literal "false"

\end_inset

.
 GMRES is a Krylov subspace method designed to solve non-symmetric linear systems of the form 
\begin_inset Formula $Ax=b$
\end_inset

.
 Unlike direct solvers,
 GMRES builds an orthonormal basis of the Krylov subspace and minimizes the residual over this subspace at each iteration.
 The solver iterates for 
\begin_inset Formula $x$
\end_inset

 in the linear system rather than trying to invert 
\begin_inset Formula $A$
\end_inset

.
 The order of operations needed for GMRES is 
\begin_inset Formula $\mathcal{O}\left(kn_{s}^{2}+k^{2}n_{s}+k^{3}\right)$
\end_inset

 where 
\begin_inset Formula $k$
\end_inset

 is the number of iterations required to converge.
 For well conditioned matrix the 
\begin_inset Formula $n_{s}^{2}$
\end_inset

 term can dominate thus reducing the overall cost of the linear solve.
\end_layout

\begin_layout Standard
The number of GMRES iterations,
 
\begin_inset Formula $k$
\end_inset

,
 is directly related to the condition number of matrix 
\begin_inset Formula $A$
\end_inset

 .
 ChemGen provides some standard preconditioners to assist in convergence of the GMRES solve 
\begin_inset CommandInset citation
LatexCommand citet
key "Gol13"
literal "false"

\end_inset

.
 The most simple is the inversion of the diagonal of 
\begin_inset Formula $\mathcal{J}$
\end_inset

 in Equation
\begin_inset space ~
\end_inset


\begin_inset CommandInset ref
LatexCommand eqref
reference "eq:matrix_example_1"
plural "false"
caps "false"
noprefix "false"
nolink "false"

\end_inset

 and applying it to both sides of the system.
 This is known at the Jacobi preconditioner this is a fast preconditioner calculation as it only inverts the diagonals and can be directly applied to the existing system.
 In addition,
 the Gauss-Seidel preconditioner is also supplied which inverts a matrix converged of the lower and diagonal components of 
\begin_inset Formula $A$
\end_inset

 and applies it as a preconditioner to the system.
 For more advanced chemical kinetics based preconditioners see 
\begin_inset CommandInset citation
LatexCommand citet
key "Wal23"
literal "false"

\end_inset

.
\end_layout

\begin_layout Standard
ChemGen is not intended to serve as a comprehensive linear solver library.
 For more advanced or scalable linear solver capabilities,
 ChemGen can be interfaced with external libraries such as Eigen 
\begin_inset CommandInset citation
LatexCommand citet
key "Gue10"
literal "false"

\end_inset

 or PETSc 
\begin_inset CommandInset citation
LatexCommand citet
key "Bal97"
literal "false"

\end_inset

,
 which offer efficient preconditioned Krylov solvers and direct sparse solvers for large systems.
 Additionally,
 while ChemGen includes several implicit time integration strategies (e.g.,
 backward Euler,
 SDIRK methods),
 offloading the integration of stiff ODE systems to established libraries like CVODES
\begin_inset CommandInset citation
LatexCommand citet
key "Ser05"
literal "false"

\end_inset

 is also a reasonable approach.
 Such packages allow user-supplied source terms and Jacobians that can then be integrated in time.
\end_layout

\begin_layout Section
Code Generation
\begin_inset CommandInset label
LatexCommand label
name "sec:Code-Generation"

\end_inset


\end_layout

\begin_layout Standard
In the ChemGen software there are three main file types.
 The first file types are python files that manipulate chemistry data and existing static code to create compilation ready source code.
 The second file type are static code that are ingested by python code and reformatted to the desired target software.
 The remaining file types are a mixture of python code used to exercise tutorals,
 most of which covered in the results section,
 Section 5,
 and yaml files that contain kinetic data.
\end_layout

\begin_layout Subsection
The concept of decorators
\end_layout

\begin_layout Standard
C++ is a malleable language that allows developers to abstract underlying data structures through type aliases (
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{using scalar = float;}
\end_layout

\end_inset

) and operator overloading.
 As a result,
 variables may appear to be simple scalars while in fact representing complex types with custom behavior.
 This flexibility enables expressive,
 domain-specific syntax,
 but means that there is not one set of generated code that would work for imedding existing C++ software.
 
\end_layout

\begin_layout Standard
For instance the function
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

float sqr (float a){return a*a;} 
\backslash

\backslash
example function 1
\end_layout

\end_inset

may be more suitable for the developer to have the function as a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{const}
\end_layout

\end_inset

 in a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{struct}
\end_layout

\end_inset

 or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{class}
\end_layout

\end_inset

.
 In addition,
 the scalar 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{float}
\end_layout

\end_inset

 could also be 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{double}
\end_layout

\end_inset

 and the parameters of the function may be desired to pass in by
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{const}
\end_layout

\end_inset

 reference 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{float a}
\end_layout

\end_inset

 
\begin_inset Formula $\rightarrow$
\end_inset

 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{const float
\backslash
& a}
\end_layout

\end_inset

.
 a function annotation may also be desirable,
 such as the preprocessor macro used in the Kokkos library 
\begin_inset CommandInset citation
LatexCommand citet
key "Tro22"
literal "false"

\end_inset

.
 Thus,
 the operations necessary to compute the math in this function may look totally different based on the developers desire,
 turning the above example to
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

KOKKOS_INLINE_FUNCTION
\end_layout

\begin_layout Plain Layout

float sqr (const float& a) const {return a*a;}
\backslash

\backslash
example function 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
ChemGen utilizes 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
emph{decorators}
\end_layout

\end_inset

 To assist in the flexibility of generating desirable C++ code.
 The above example can be changed to a python formattable python string
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

{device_function}
\end_layout

\begin_layout Plain Layout

{scalar_function} sqr ({scalar_parameter} a) {const_option} {{return a*a;}} 
\backslash

\backslash
python formattable
\end_layout

\end_inset

ChemGen utilizes these decorators throughout the code generation process.
 When the code generation takes place,
 a 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{configuration.yaml}
\end_layout

\end_inset

 file is utilized that replaces the decorators with the appropriate text.
 So for example function 1:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

decorators:
\end_layout

\begin_layout Plain Layout

  scalar_function:
 "float"
\end_layout

\begin_layout Plain Layout

  scalar_parameter:
 "float"
\end_layout

\begin_layout Plain Layout

  device_option:
 ""
\end_layout

\begin_layout Plain Layout

  const_option:
 ""
\end_layout

\end_inset


\end_layout

\begin_layout Standard
and for example function 2:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

decorators:
\end_layout

\begin_layout Plain Layout

  scalar_function:
 "float"
\end_layout

\begin_layout Plain Layout

  scalar_parameter:
 "const float&"
\end_layout

\begin_layout Plain Layout

  device_option:
 "KOKKOS_INLINE_FUNCTION"
\end_layout

\begin_layout Plain Layout

  const_option:
 "const"
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The configuration file also includes the ability to switch from 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{std::array}
\end_layout

\end_inset

 to 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{std::vector}
\end_layout

\end_inset

 and allow other data types such as 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{Views}
\end_layout

\end_inset

 from Kokkos or 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{std::tuple}
\end_layout

\end_inset

 derived types for the arrays of data concerning species or temperature monomials.
 
\end_layout

\begin_layout Subsection
Derivatives
\end_layout

\begin_layout Standard
ChemGen makes use of mechanical differentiation approach where the underlying mathematics for essential problems have supply their derivatives and chain rules when necessary.
 This means that a functions derivative,
 when added to the static code base,
 should be immediately accessible giving the access to the underlying derivatives supplied by chemgen.
 For instance,
 the Arrhenius function as generated using a default configuration in ChemGen is
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double
\end_layout

\begin_layout Plain Layout

arrhenius(const double& A,
 const double& B,
 const double& E,
 const double& temperature) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

        double pow_term = pow_gen(temperature,
 B);
\end_layout

\begin_layout Plain Layout

        double exp_term = exp_gen(divide(-E,
 universal_gas_constant() * temperature));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return multiply(A,
\end_layout

\begin_layout Plain Layout

                        multiply(pow_term,
\end_layout

\begin_layout Plain Layout

                                 exp_term));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
ChemGen supplies the derivatives for the mathematical operations in that function.
 For instances,
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{pow
\backslash
_gen}
\end_layout

\end_inset

's derivatives given that it has two parameters would yield two derivatives and one chain rule:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double dpow_da(const double& a,
 const double& b)  
\end_layout

\begin_layout Plain Layout

{return b * std::pow(a,
 b - double(1));}
\end_layout

\begin_layout Plain Layout

double dpow_db(const double& a,
 const double& b)  
\end_layout

\begin_layout Plain Layout

{return std::pow(a,
 b) * std::log(a);}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

double
\end_layout

\begin_layout Plain Layout

pow_gen_chain(const double& a,
 
\end_layout

\begin_layout Plain Layout

              const double& a_perturbation,
\end_layout

\begin_layout Plain Layout

              const double& b,
\end_layout

\begin_layout Plain Layout

              const double& b_perturbation) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

    return dpow_da(a,
 b) * a_perturbation + dpow_db(a,
 b) * b_perturbation;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

The same derivatives,
 partial derivative per parameter and a chain rule contracting the partials with a perturbation,
 can assumed to be accessible when developing higher level functions.
 Assuming this capability,
 the derivative of the Arrhenius function with respect to temperature is 
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double
\end_layout

\begin_layout Plain Layout

darrhenius_dtemperature(const double& A,
 
\end_layout

\begin_layout Plain Layout

                        const double& B,
\end_layout

\begin_layout Plain Layout

                        const double& E,
\end_layout

\begin_layout Plain Layout

                        const double& temperature) 
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

        double pow_term = pow_gen(temperature,
 B);
\end_layout

\begin_layout Plain Layout

        double dpow_term_dtemperature = dpow_da(temperature,
 B);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        double exp_term =
\end_layout

\begin_layout Plain Layout

            exp_gen(divide(-E,
\end_layout

\begin_layout Plain Layout

                           universal_gas_constant() * temperature));
\end_layout

\begin_layout Plain Layout

        double dexp_term_dtemperature =
\end_layout

\begin_layout Plain Layout

            exp_chain(divide(-E,
\end_layout

\begin_layout Plain Layout

                             universal_gas_constant() * temperature),
\end_layout

\begin_layout Plain Layout

                      ddivide_db(-E,
\end_layout

\begin_layout Plain Layout

                                 universal_gas_constant() * temperature));
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        return multiply(A,
\end_layout

\begin_layout Plain Layout

                        multiply_chain(pow_term,
\end_layout

\begin_layout Plain Layout

                                       dpow_term_dtemperature,
\end_layout

\begin_layout Plain Layout

                                       exp_term,
\end_layout

\begin_layout Plain Layout

                                       dexp_term_dtemperature));
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
We found that this mechanical differentiation approach is both efficient and more readable compared to symbolic differentiation,
 where derivatives are discovered through symbolic manipulation using tools like SymPy.
 While symbolic differentiation can be valuable,
 especially for higher-level expressions,
 we found the mechanical approach better suited for organizing and maintaining ChemGen’s code generation process.
 Regardless,
 since the functions are available in C++ once generated packages like autodiff 
\begin_inset CommandInset citation
LatexCommand citet
key "Lea18"
literal "false"

\end_inset

 can be implemented to use a wider variety of differentiable functionality.
 For a mathematical overview of the derivatives needed for chemically reacting flow,
 see 
\begin_inset CommandInset citation
LatexCommand citet
key "Nie17"
literal "false"

\end_inset

.
\end_layout

\begin_layout Subsection
Generation Process
\end_layout

\begin_layout Standard
The code generation process in ChemGen is designed to be as minimal and streamlined as possible.
 ChemGen relies on Cantera to interpret chemical mechanism files.
 Cantera performs several key tasks:
 parsing the chemistry data,
 converting units to the International System of Units (SI),
 and providing thermodynamic relationships that can be refit into the desired polynomial form.
 As a well-maintained and widely used tool in the combustion community,
 with over 750 references in Combustion and Flame at the time of writing,
 Cantera provides a dependable foundation for ChemGen.
 Nevertheless,
 should Cantera become unavailable,
 ChemGen could be extended to handle data parsing,
 unit conversion,
 and polynomial re-fitting internally.
\end_layout

\begin_layout Standard
Once past the Cantera step,
 ChemGen begins to generate source code.
 The state size is hardcoded with several automatically generated variables,
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{Species}
\end_layout

\end_inset

,
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{ChemicalState}
\end_layout

\end_inset

,
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{Jacobian}
\end_layout

\end_inset

 which are size 
\begin_inset Formula $n_{s}$
\end_inset

,
 
\begin_inset Formula $n_{s}+1$
\end_inset

,
 and 
\begin_inset Formula $n_{s}\times n_{s}$
\end_inset

 or 
\begin_inset Formula $n_{s}\times\left(n_{s}+1\right)$
\end_inset

 depending on selection of 
\begin_inset Formula $\mathcal{J}_{a}$
\end_inset

 or
\begin_inset Formula $\mathcal{J}_{b}$
\end_inset

,
 respectively.
 The stoichemetric coefficients 
\begin_inset Formula $\nu_{ij}$
\end_inset

,
 
\begin_inset Formula $\nu_{ij}^{f}$
\end_inset

,
 
\begin_inset Formula $\nu_{ij}^{r}$
\end_inset

and reaction types and their coefficients for each reaction are then accrued.
 Each reaction rate is generated into a
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{reactions.h}
\end_layout

\end_inset

 header file,
 for example a reaction if the first reaction a cantera based yaml file is
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

- equation:
 H + O2 <=> O + OH
\end_layout

\begin_layout Plain Layout

rate-constant:
 {A:
 1.0399e+11,
 b:
 0.0,
 Ea:
 6.405704e+07}
\end_layout

\end_inset

then the following code is generated with default configuration settings,
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double call_forward_reaction_0(const double& temperature,
 
\end_layout

\begin_layout Plain Layout

                              const double& log_temperature) 
\end_layout

\begin_layout Plain Layout

{ 
\end_layout

\begin_layout Plain Layout

	return arrhenius(103990000000.0,
 64057040.0,
 temperature,
 log_temperature);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset

Once all reactions are generated a source term file is then generated.
 The source file begins by calculating 
\begin_inset Formula $M_{c}$
\end_inset

,
 
\begin_inset Formula $\ln T$
\end_inset

,
\begin_inset Formula $p$
\end_inset

,
 from 
\begin_inset Formula $C$
\end_inset

 and 
\begin_inset Formula $T$
\end_inset

,
 as well as the 
\begin_inset Formula $\Delta G_{j}'$
\end_inset

 for all reactions,
 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
texttt{gibbs
\backslash
_reactions}
\end_layout

\end_inset

.
 and then looping through all reactions and generating the necessary code if a reverse reaction rate is needed.
 In the above example a reverse reaction is necessary and so ChemGen would generate
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

double forward_reaction_0 = call_forward_reaction_0(temperature,
 log_temperature);
\end_layout

\begin_layout Plain Layout

double equilibrium_constant_0 = exp_gen(-gibbs_reactions[0]);
\end_layout

\begin_layout Plain Layout

double rate_of_progress_0 = 
\end_layout

\begin_layout Plain Layout

species[0] * species[3] * forward_reaction_0 
\end_layout

\begin_layout Plain Layout

- species[2] * species[4] * forward_reaction_0/equilibrium_constant_0;
\end_layout

\end_inset

Where the rates of progress for each reaction,
 
\begin_inset Formula $q_{i}$
\end_inset

,
 rely on the stoichiometric coefficients and are generated 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
alignment document
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename chemgen_flowchart.pdf
	draft

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:flowchart"

\end_inset

ChemGen flowchart
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Results and Demonstration Cases
\end_layout

\begin_layout Subsection
Error Analysis
\end_layout

\begin_layout Subsection
Jacobian Analysis
\end_layout

\begin_layout Subsection
Time Integration Comparisons
\end_layout

\begin_layout Subsection
Detonation using detonationEulerFoam
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{\phi^{n+1}-\phi^{n}}{\Delta t}+\mathcal{F}_{\text{FVM}}\left(\phi^{n+1}\right)=\mathcal{R}\label{eq:Backward_euler-1}
\end{equation}

\end_inset

The Newton's method can be used to iteratively find 
\begin_inset Formula $\phi^{n+1}$
\end_inset

 by rewriting 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\frac{-\phi^{n}}{\Delta t}+\frac{\phi^{n+1}}{\Delta t}+\mathcal{F}_{\text{FVM}}\left(\phi^{n+1}\right)-\mathcal{R}=f(\phi^{n+1})=0\label{eq:BE-rewrite-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\delta\phi^{n+1}=\left(\phi_{k+1}^{n+1}-\phi_{k}^{n+1}\right)=-\mathcal{J}\left(\phi_{k}^{n+1}\right)^{-1}f(\phi_{k}^{n+1})\label{eq:newtons-method-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
Where 
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(\phi_{k}^{n+1}\right)=\frac{\phi^{n+1}}{\Delta t}+\frac{\partial\mathcal{F}_{\text{FVM}}}{\partial\phi^{n+1}}\left(\phi^{n+1}\right)-0\label{eq:BE-rewrite-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\phi=\rho Y_{i}\label{eq:BE-rewrite-1-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
R=\frac{C_{i}^{n+1}-C_{i}^{n}}{\Delta t}\label{eq:BE-rewrite-1-1-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
y=\left(C_{1},\dots,C_{n_{s}}\right)\label{eq:Backward_euler-2}
\end{equation}

\end_inset


\end_layout

\begin_layout Enumerate
Given 
\begin_inset Formula $Y$
\end_inset

,
 
\begin_inset Formula $\rho e_{t}$
\end_inset

,
 and 
\begin_inset Formula $\rho\vec{v}$
\end_inset

:
 Solve chemistry evolution ODEs:
 
\begin_inset Formula $\frac{\partial y_{c}}{\partial t}=S(y_{c})\rightarrow R_{i}=\frac{C_{i}^{n+1}-C_{i}^{n}}{\Delta t}$
\end_inset

.
 
\begin_inset Formula $C_{i}^{n}$
\end_inset

 comes from 
\begin_inset Formula $Y_{i}=\frac{W_{i}C_{i}^{n}}{\rho}$
\end_inset

 
\begin_inset Formula $T^{n}$
\end_inset

 comes from 
\begin_inset Formula $\rho e_{t}\rightarrow\rho u(Y_{i},T)$
\end_inset

.
\end_layout

\begin_layout Enumerate
Solve Species TRANSPORT Equation given 
\begin_inset Formula $\frac{\partial\rho Y_{i}}{\partial t}+\nabla\cdot(\rho Y_{i}\vec{v})=R_{i}$
\end_inset


\end_layout

\begin_layout Enumerate
Solve Momentum transport equation (blind of 
\begin_inset Formula $R$
\end_inset

)
\begin_inset Formula $\frac{\partial\rho\vec{v}}{\partial t}+\nabla\cdot(\rho Y_{i}\vec{v}\otimes\vec{v})=p\mathcal{I}$
\end_inset


\end_layout

\begin_layout Enumerate
Solve Energy transport equations (using an energy source term derived from 
\begin_inset Formula $\frac{\partial\rho e_{t}}{\partial t}+\nabla\cdot(\rho e_{t}\vec{v}+p\vec{v})=Q$
\end_inset

 where 
\begin_inset Formula $Q=\sum_{i=1}^{n_{s}}R_{i}h_{i}^{c}$
\end_inset


\end_layout

\begin_layout Standard
Analysis of time scales
\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y\right)_{ij}=-\frac{\partial\omega_{i}}{\partial C_{j}}\label{eq:jacobian-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\tau_{min}=\text{min}\left(Re\left(\lambda_{j}\left(\mathcal{J}\right)\right)^{-1}\right)\label{eq:jacobian-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y\right)_{ij}=\sum_{k=1}^{n_{r}}\nu_{kij}\mathcal{R}_{k}\label{eq:jacobian-1-2}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y\right)_{\ne R}=\sum_{k=1,k\ne R}^{n_{r}}\nu_{kij}\mathcal{R}_{k}\label{eq:jacobian-1-2-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula 
\begin{equation}
\tau_{min}=\text{min}\left(Re\left(\lambda_{j}\left(\mathcal{J}_{\ne R}\right)\right)^{-1}\right)\label{eq:jacobian-1-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Subsection
Reaction Rates
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout
Parallelism
\end_layout

\begin_layout Plain Layout
Several optimizations can be made in the code generation of the source term calculations.
 The overall target of Chemgen is to be used in CFD,
 wether to calculate source terms on the fly or to calculate in post processing independent of the CFD solver.
 In either approach it is important to consider how these source terms can be built efficiently into software.
 Here we outline and label several distinct parallelization approaches that can be utilized.
 The choice of parallelization comes down to feasibility of implementation (particularly for existing software),
 size of source term (i.e.
 10 reactions vs 1000 reactions),
 and existing hardware.
 In The Results section we utilize the malleability given by code generation to implement each of these parallelizations for chemical reaction mechanisms of various sizes and comment on the choice of each algorithm.
\end_layout

\begin_layout Plain Layout
Using the above description the following steps can be used in serial to calculate all source terms
\end_layout

\begin_layout Enumerate
For all states at every degree of freedom,
 
\begin_inset Formula $y_{f,p}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate chemical state 
\begin_inset Formula $y_{f,p}\rightarrow y_{c,p}$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate all forward reactions,
 
\begin_inset Formula $k_{p}=\left(k_{1}^{f}\left(y_{c,p}\right),k_{2}^{f}\left(y_{c,p}\right),k_{3}^{f}\left(y_{c,p}\right),\dots,k_{n_{r}}^{f}\left(y_{c,p}\right)\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Using 
\begin_inset Formula $k_{p}$
\end_inset

 calculate all rates of progress 
\begin_inset Formula $q_{p}=\left(q_{1,p},q_{2,p},q_{3,p},\dots,q_{n_{r},p}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate all production rates 
\begin_inset Formula $\omega_{p}=\left(\omega_{1,p},\omega_{2,p},\omega_{3,p},\dots,\omega_{n_{s},p}\right)$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Plain Layout
The algorithm above when done in serial is 
\begin_inset Formula $2\left(n_{dof}\times n_{r}\right)+\left(n_{dof}\times n_{s}\right)$
\end_inset

 number of operations and we refer to it as 
\series bold
S
\series default
 in the following sections.
 It is the most simple and easy implementation to utilize.
 As such,
 it can be regularly be debugged and examined.
 However,
 if 
\begin_inset Formula $n_{r}$
\end_inset

 or 
\begin_inset Formula $n_{s}$
\end_inset

 become large,
 the source term may become to cumbersome to execute in serial over all degrees of freedom.
\end_layout

\begin_layout Plain Layout
Using the first level of parallelization,
 
\series bold
S
\series default
 could be decompose the domain of degrees of freedom and equally distribute the work using the following algorithm
\end_layout

\begin_layout Plain Layout
S-d
\end_layout

\begin_layout Enumerate
For all states at every degree of freedom,
 
\begin_inset Formula $y_{f,p}$
\end_inset

 decompose into 
\begin_inset Formula $d$
\end_inset

 decomposition,
 
\begin_inset Formula $y_{f,p}|_{d}$
\end_inset

 of 
\begin_inset Formula $n_{d}$
\end_inset

 domains
\end_layout

\begin_deeper
\begin_layout Enumerate
For each domain element,
 
\begin_inset Formula $d$
\end_inset

,
 perform the source term calculations in parallel:
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate Chemical state 
\begin_inset Formula $y_{f,p}|_{d}\rightarrow y_{c,p}$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate all forward reactions,
 
\begin_inset Formula $k_{p}=\left(k_{1}^{f}\left(y_{c,p}\right),k_{2}^{f}\left(y_{c,p}\right),k_{3}^{f}\left(y_{c,p}\right),\dots,k_{n_{r}}^{f}\left(y_{c,p}\right)\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Using 
\begin_inset Formula $k_{p}$
\end_inset

 calculate all rates of progress 
\begin_inset Formula $q_{p}=\left(q_{1,p},q_{2,p},q_{3,p},\dots,q_{n_{r},p}\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate all production rates 
\begin_inset Formula $\omega_{p}=\left(\omega_{1,p},\omega_{2,p},\omega_{3,p},\dots,\omega_{n_{s},p}\right)$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Gather 
\begin_inset Formula $\omega_{p}$
\end_inset

 to assimilate full set for all degrees of freedom (if necessary).
\end_layout

\end_deeper
\begin_layout Plain Layout
This yields the same number of operations but each domain performs 
\begin_inset Formula $\left(\frac{1}{n_{d}}\right)\left(2\left(n_{dof}\times n_{r}\right)+\left(n_{dof}\times n_{s}\right)\right)$
\end_inset

 and we refer to this approach as 
\series bold
S-d
\series default
.
\end_layout

\begin_layout Plain Layout
If available,
 another tier of parallelization can utilized in multiple ways,
 for instance the calculations can be further decomposed into individual launches for threaded operations.
 For these examples we specifically utilize thread building blocks,
 we also specifically modified them for GPU based algorithms that we mention later in this section.
 The first approach using threading is as follows:
\end_layout

\begin_layout Enumerate
For all states at every degree of freedom,
 
\begin_inset Formula $y_{f,p}$
\end_inset

 decompose into 
\begin_inset Formula $d$
\end_inset

 decomposition,
 
\begin_inset Formula $y_{f,p}|_{d}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
For each domain element,
 
\begin_inset Formula $d$
\end_inset

,
 perform the source term calculations in parallel:
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate Chemical state 
\begin_inset Formula $y_{f,p}|_{d}\rightarrow y_{c,p}$
\end_inset


\end_layout

\begin_layout Enumerate
Thread over the 
\begin_inset Formula $\frac{1}{n_{d}}n_{dof}n_{r}$
\end_inset

 calculations to calculate forward reactions,
 
\begin_inset Formula $k_{p}=\left(k_{1}^{f}\left(y_{c,p}\right),k_{2}^{f}\left(y_{c,p}\right),k_{3}^{f}\left(y_{c,p}\right),\dots,k_{n_{r}}^{f}\left(y_{c,p}\right)\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Thread over the 
\begin_inset Formula $\frac{1}{n_{d}}n_{dof}n_{r}$
\end_inset

 calculations to calculate all rates of progress 
\begin_inset Formula $q_{p}=\left(q_{1,p},q_{2,p},q_{3,p},\dots,q_{n_{r},p}\right)$
\end_inset

 in domain 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Enumerate
Thread over the 
\begin_inset Formula $\frac{1}{n_{d}}n_{dof}n_{s}$
\end_inset

 calculations to calculate all production rates 
\begin_inset Formula $\omega_{p}=\left(\omega_{1,p},\omega_{2,p},\omega_{3,p},\dots,\omega_{n_{s},p}\right)$
\end_inset

 
\end_layout

\end_deeper
\begin_layout Enumerate
Gather 
\begin_inset Formula $\omega_{p}$
\end_inset

 to assimilate full set for all degrees of freedom (if necessary).
\end_layout

\end_deeper
\begin_layout Plain Layout
We refer to this parallelization as 
\series bold
T1.
 
\series default
Although 
\series bold
T1
\series default
 is appealing and provides a straightforward transition from 
\series bold
S-d,
 
\series default
the number of thread launches can become expensive,
 thus we introduce another threading approach that threads over each degree of freedom within the subdomain
\end_layout

\begin_layout Enumerate
For all states at every degree of freedom,
 
\begin_inset Formula $y_{f,p}$
\end_inset

 decompose into 
\begin_inset Formula $d$
\end_inset

 decomposition,
 
\begin_inset Formula $y_{f,p}|_{d}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
For each domain element,
 
\begin_inset Formula $d$
\end_inset

,
 perform the source term calculations in parallel:
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate Chemical state 
\begin_inset Formula $y_{f,p}|_{d}\rightarrow y_{c,p}$
\end_inset


\end_layout

\begin_layout Enumerate
Thread over each chemical state in the subdomain
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate the reactions,
 
\begin_inset Formula $k_{p}=\left(k_{1}^{f}\left(y_{c,p}\right),k_{2}^{f}\left(y_{c,p}\right),k_{3}^{f}\left(y_{c,p}\right),\dots,k_{n_{r}}^{f}\left(y_{c,p}\right)\right)$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate the rates of progress 
\begin_inset Formula $q_{p}=\left(q_{1,p},q_{2,p},q_{3,p},\dots,q_{n_{r},p}\right)$
\end_inset

 in domain 
\begin_inset Formula $d$
\end_inset


\end_layout

\begin_layout Enumerate
Calculate all production rates 
\begin_inset Formula $\omega_{p}=\left(\omega_{1,p},\omega_{2,p},\omega_{3,p},\dots,\omega_{n_{s},p}\right)$
\end_inset

 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Gather 
\begin_inset Formula $\omega_{p}$
\end_inset

 to assimilate full set for all degrees of freedom (if necessary).
\end_layout

\end_deeper
\begin_layout Plain Layout
This performs the source term at every threaded degree of freedom in serial.
 We refer to the parallelization as 
\series bold
T2
\series default
.
\end_layout

\begin_layout Plain Layout
With some rearranging the source term can be assembled over one 
\begin_inset Formula $n_{r}$
\end_inset

 threaded loop for each degree of freedom in serial,
\end_layout

\begin_layout Enumerate
For all states at every degree of freedom,
 
\begin_inset Formula $y_{f,p}$
\end_inset

 decompose into 
\begin_inset Formula $d$
\end_inset

 decomposition,
 
\begin_inset Formula $y_{f,p}|_{d}$
\end_inset


\end_layout

\begin_deeper
\begin_layout Enumerate
For each domain element,
 
\begin_inset Formula $d$
\end_inset

,
 perform the source term calculations in parallel:
\end_layout

\begin_deeper
\begin_layout Enumerate
Calculate Chemical state 
\begin_inset Formula $y_{f,p}|_{d}\rightarrow y_{c,p}$
\end_inset


\end_layout

\begin_layout Enumerate
Assemble the source term for each chemical state in the subdomain
\end_layout

\begin_deeper
\begin_layout Enumerate
Create 
\begin_inset Formula $\omega_{p}$
\end_inset

 for storage (if it doesn't already exist)
\end_layout

\begin_layout Enumerate
Thread over 
\begin_inset Formula $n_{r}$
\end_inset

 reactions,
 indexed 
\begin_inset Formula $j$
\end_inset

 
\end_layout

\begin_layout Enumerate
individually calculate 
\begin_inset Formula $k_{j}$
\end_inset

 
\end_layout

\begin_layout Enumerate
using 
\begin_inset Formula $k_{j}$
\end_inset

 calculate the rates of progress 
\begin_inset Formula $q_{j}$
\end_inset


\end_layout

\begin_layout Enumerate
for 
\begin_inset Formula $\nu_{ij}\ne$
\end_inset

0 add 
\begin_inset Formula $\nu_{ij}q_{j}$
\end_inset

 to the existing source term,
 
\begin_inset Formula $\omega_{p}$
\end_inset

,
 element 
\begin_inset Formula $i$
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
Gather 
\begin_inset Formula $\omega_{p}$
\end_inset

 to assimilate full set for all degrees of freedom (if necessary).
\end_layout

\end_deeper
\begin_layout Plain Layout
This creates on launch per degree of freedom but increases the compute on each thread.
 We refer to this parallelization as 
\series bold
T3.
\end_layout

\begin_layout Plain Layout
For all approaches 
\series bold
S
\series default
,
 
\series bold
S-d
\series default
,
 
\series bold
T1
\series default
,
 
\series bold
T2,
 T3
\series default
,

\series bold
 
\series default
there is bound to be a trade off.
 Some of these methods use several launches to utilize threading which can be expensive,
 however,
 if there are many fast threads available the launch time may become negligible.
 In addition,
 some of these approaches utilize various compute efficiencies that may be better for different hardware.
 In CFD chemical source terms are unique in that they are embarrassed of their neighboring degrees of freedom.
 Quantities such as fluxes and gradients require face contributions that involve other degrees of freedom.
 It is therefore feasible that the approaches laid out here could be implemented in a variety of CFD software,
 with the caveat that the performance may not transition due to other factors beholden to the target software.
 
\end_layout

\begin_layout Plain Layout
In this section we utilize these architectures in on several systems with two main approaches,
 the first is to use CPU based parallelism with the threading is done using the logical cores on a given node and the second is using GPU based parallelism.
 These approaches are mainly to showcase that the generated code can be arranged to fit the needs of the user;
 however,
 we do report signficant speed-up and general findings,
 which was found to be consistent with the theoretical configurations of the architectures we tested on.
 Full optimization of the execution of these algorithms can be pursued in future iterations of Chemgen.
\end_layout

\begin_layout Subsubsection
CPU Based Parallelism 
\end_layout

\begin_layout Plain Layout
Stiffness
\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y_{k}^{n+1}\right)_{ij}=-\frac{\partial\omega_{i}}{\partial C_{j}}\label{eq:jacobian-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
\tau_{min}=\text{min}\left(Re\left(\lambda_{j}\left(\mathcal{J}\right)\right)^{-1}\right)\label{eq:jacobian-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y_{k}^{n+1}\right)_{ij}=\sum_{k=1}^{n_{r}}\nu_{kij}q_{k}\label{eq:jacobian-1-2}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
\mathcal{J}\left(y_{k}^{n+1}\right)_{\ne R}=\sum_{k=1,k\ne R}^{n_{r}}\nu_{kij}q_{k}\label{eq:jacobian-1-2-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Formula 
\begin{equation}
\tau_{min}=\text{min}\left(Re\left(\lambda_{j}\left(\mathcal{J}_{\ne R}\right)\right)^{-1}\right)\label{eq:jacobian-1-1-1}
\end{equation}

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
btprint "btPrintCited"
bibfiles "citations,citations_runover"
options "elsarticle-num"
encoding "default"

\end_inset


\end_layout

\end_body
\end_document
